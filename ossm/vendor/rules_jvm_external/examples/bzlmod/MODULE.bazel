module(
    name = "rules_jvm_external_examples_bzlmod",
    version = "6.0",
)

bazel_dep(name = "rules_jvm_external", version = "0.0")
local_path_override(
    module_name = "rules_jvm_external",  # matches the name of the `bazel_dep`
    path = "../..",
)

maven = use_extension("@rules_jvm_external//:extensions.bzl", "maven")
maven.artifact(
    artifact = "guava",
    exclusions = ["com.google.code.findbugs:jsr305"],
    group = "com.google.guava",
    version = "31.1-jre",
)
maven.install(
    artifacts = [
        "org.seleniumhq.selenium:selenium-java:4.4.0",
    ],
    fetch_sources = True,
    lock_file = "//:maven_install.json",
)

# The default resolver cannot handle Maven BOMs, but the `maven`
# resolver can. Demonstrate how to use it.
maven.install(
    name = "alternative_resolver",
    artifacts = [
        "org.junit.jupiter:junit-jupiter-api",
    ],
    boms = [
        "org.junit:junit-bom:5.11.0",
    ],
    # Before the first pin, this file was completely empty. Running:
    # `REPIN=1 bazel run @alternative_resolver//:pin` generated it.
    lock_file = "//:alternative_maven_install.json",
    resolver = "maven",
)
use_repo(maven, "alternative_resolver", "maven")
