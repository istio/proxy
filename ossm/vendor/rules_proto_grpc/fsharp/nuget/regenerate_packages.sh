#!/bin/bash

#
# Script is written to be run from the WORKSPACE root
#
set -eu
set -o pipefail
set -x

PROTOBUF_VERSION="3.21.9"
GRPC_VERSION="2.53.0"
PROTOBUF_FSHARP_VERSION="0.2.0"
GRPC_FSHARP_VERSION="0.2.0"

OUTPUT_DIR="$(pwd)/fsharp/nuget"
FILE_NAME="nuget.bzl"
DOTNET_TOOLCHAIN="$(uname -sm | tr 'A-Z ' 'a-z_' | sed -e 's/x86_64/amd64/')_6.0.101"
TOOL="bazel run --host_platform=@io_bazel_rules_dotnet//dotnet/toolchain:${DOTNET_TOOLCHAIN} --platforms=@io_bazel_rules_dotnet//dotnet/toolchain:${DOTNET_TOOLCHAIN} @io_bazel_rules_dotnet//tools/nuget2bazel:nuget2bazel.exe --"

# Clear output files
if [ -f "${OUTPUT_DIR}/${FILE_NAME}" ]; then
    rm "${OUTPUT_DIR}/${FILE_NAME}"
fi
if [ -f "${OUTPUT_DIR}/nuget2config.json" ]; then
    rm "${OUTPUT_DIR}/nuget2config.json"
fi

# Build template
cat <<EOF > "${OUTPUT_DIR}/${FILE_NAME}"
load("@io_bazel_rules_dotnet//dotnet:defs.bzl", "dotnet_nuget_new", "nuget_package")

# Backwards compatibility definitions
def nuget_protobuf_packages():
    nuget_rules_proto_grpc_packages()

def nuget_grpc_packages():
    nuget_rules_proto_grpc_packages()

def no_op():
    # Function that does nothing, to be placeholder in below function. This prevents it being a
    # syntax error when nuget2bazel is first run
    pass

def nuget_rules_proto_grpc_packages():
    no_op()

    ### Generated by the tool
    ### End of generated by the tool
    dotnet_nuget_new(
        name = "grpc-fsharp",
        build_file_content = """
load("@io_bazel_rules_dotnet//dotnet:defs.bzl", "core_import_binary")

core_import_binary(
    name = "bin",
    src = select(
        {
            "@io_bazel_rules_dotnet//dotnet/toolchain:3.1.100_config": "tools/netcoreapp3.1/any/FSharp.GrpcCodeGenerator.dll",
            "@io_bazel_rules_dotnet//dotnet/toolchain:3.1.407_config": "tools/netcoreapp3.1/any/FSharp.GrpcCodeGenerator.dll",
            "@io_bazel_rules_dotnet//dotnet/toolchain:5.0.201_config": "tools/net5.0/any/FSharp.GrpcCodeGenerator.dll",
            "@io_bazel_rules_dotnet//dotnet/toolchain:5.0.404_config": "tools/net5.0/any/FSharp.GrpcCodeGenerator.dll",
            "@io_bazel_rules_dotnet//dotnet/toolchain:6.0.101_config": "tools/net6.0/any/FSharp.GrpcCodeGenerator.dll",
        },
    ),
    deps = [
        "@protobuf.fsharp//:lib",
    ],
    version = "$GRPC_FSHARP_VERSION",
    visibility = ["//visibility:public"],
)
    """,
        package = "grpc-fsharp",
        version = "$GRPC_FSHARP_VERSION",
        sha256 = "23f5525682dce5a9719c62d888580902a5b4827070653aecdb58ac27201d84e7",
    )
EOF

# Add deps
${TOOL} add --path "${OUTPUT_DIR}" --indent --bazelfile "${FILE_NAME}" Google.Protobuf "${PROTOBUF_VERSION}"
${TOOL} add --path "${OUTPUT_DIR}" --indent --bazelfile "${FILE_NAME}" Grpc.Net.Client "${GRPC_VERSION}"
${TOOL} add --path "${OUTPUT_DIR}" --indent --bazelfile "${FILE_NAME}" Grpc.AspNetCore "${GRPC_VERSION}"
${TOOL} add --path "${OUTPUT_DIR}" --indent --bazelfile "${FILE_NAME}" Protobuf.FSharp "${PROTOBUF_FSHARP_VERSION}"

# Clear packages directory
if [ -d "${OUTPUT_DIR}/packages" ]; then
    rm -r "${OUTPUT_DIR}/packages"
fi

# Patch in buildifier fixes
cat "${OUTPUT_DIR}/${FILE_NAME}" | python3 -c "import sys; sys.stdout.write('\"\"\"Generated nuget packages\"\"\"\n\n' + sys.stdin.read().replace('def nuget_rules_proto_grpc_packages():', 'def nuget_rules_proto_grpc_packages():\n    \"\"\"Nuget packages\"\"\"'))" | sponge "${OUTPUT_DIR}/${FILE_NAME}"
