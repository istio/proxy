# Copyright 2022 The Bazel Authors. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Starlark test rules for entitlements contents.

This test takes a target that propagates an AppleBundleInfo provider and a
dictionary of keys and values expected to be present in the entitlements file
generated by the rules.

This rule is meant to be used only for rules_apple tests and are considered
implementation details that may change at any time. Please do not depend on this
rule.
"""

load(
    "//apple:providers.bzl",
    "AppleBundleInfo",
)
load(
    "//test/starlark_tests/rules:apple_verification_test.bzl",
    "apple_verification_transition",
)

def _entitlements_contents_test_impl(ctx):
    """Implementation of the entitlements_contents_test rule."""
    target_under_test = ctx.attr.target_under_test[0]
    if not AppleBundleInfo in target_under_test:
        fail(("Target %s does not provide AppleBundleInfo") % target_under_test.label)

    entitlements_file = target_under_test[AppleBundleInfo].entitlements
    entitlements_path = entitlements_file.short_path

    test_lines = [
        "#!/bin/bash",
        "EXIT_CODE=0",
    ]

    for (key, value) in ctx.attr.expected_values.items():
        test_lines.extend([
            "VALUE=\"$(/usr/libexec/PlistBuddy -c \"Print {0}\" {1} 2>/dev/null)\"".format(
                key,
                entitlements_path,
            ),
            "if [[ -z \"$VALUE\" ]]; then",
            "  echo \"ERROR: Expected '{}' to be contained in the entitlements.\"".format(
                key,
            ),
            "  EXIT_CODE=1",
            "elif [[ \"$VALUE\" != {} ]]; then".format(value),
            "  echo \"ERROR: Expected '\"$VALUE\"' to match '{0}'\" for key '{1}'".format(
                value,
                key,
            ),
            "  EXIT_CODE=1",
            "fi",
        ])

    for key in ctx.attr.not_expected_keys:
        test_lines.extend([
            "VALUE=\"$(/usr/libexec/PlistBuddy -c \"Print {0}\" {1} 2>/dev/null)\"".format(
                key,
                entitlements_path,
            ),
            "if [[ -n \"$VALUE\" ]]; then",
            "  echo \"ERROR: Expected '{}' not to be contained in the entitlements.\"".format(
                key,
            ),
            "  EXIT_CODE=1",
            "fi",
        ])

    test_lines.extend([
        "if [[ \"$EXIT_CODE\" -eq 1 ]]; then",
        "  echo \"Actual contents were:\"",
        "  /usr/libexec/PlistBuddy -c \"Print\" {0} 2>/dev/null".format(
            entitlements_path,
        ),
        "fi",
    ])
    test_lines.append("exit $EXIT_CODE")

    test_script = ctx.actions.declare_file(
        "{}_test_script".format(ctx.label.name),
    )
    ctx.actions.write(test_script, "\n".join(test_lines), is_executable = True)

    xcode_config = ctx.attr._xcode_config[apple_common.XcodeVersionConfig]

    return [
        testing.ExecutionInfo(xcode_config.execution_info()),
        testing.TestEnvironment(
            apple_common.apple_host_system_env(xcode_config),
        ),
        DefaultInfo(
            executable = test_script,
            runfiles = ctx.runfiles(
                files = [entitlements_file],
            ),
        ),
    ]

# Need a cfg for a transition on target_under_test, so can't use
# analysistest.make.
entitlements_contents_test = rule(
    _entitlements_contents_test_impl,
    attrs = {
        "apple_bitcode": attr.string(
            default = "none",
            doc = """
The Bitcode mode to use for compilation steps. Possible values are `none`,
`embedded_markers`, or `embedded`. Defaults to `none`.
""",
            values = ["none", "embedded_markers", "embedded"],
        ),
        "build_type": attr.string(
            default = "simulator",
            doc = """
Type of build for the target under test. Possible values are `simulator` or
`device`. Defaults to `simulator`.
""",
            values = ["simulator", "device"],
        ),
        "compilation_mode": attr.string(
            default = "fastbuild",
            doc = """
Possible values are `fastbuild`, `dbg` or `opt`. Defaults to `fastbuild`.
https://docs.bazel.build/versions/master/user-manual.html#flag--compilation_mode
""",
            values = ["fastbuild", "opt", "dbg"],
        ),
        "apple_generate_dsym": attr.bool(
            default = False,
            doc = """
If true, generates .dSYM debug symbol bundles for the target(s) under test.
""",
        ),
        "target_under_test": attr.label(
            cfg = apple_verification_transition,
            doc = "Target containing an entitlements file to verify.",
            providers = [AppleBundleInfo],
            mandatory = True,
        ),
        "expected_values": attr.string_dict(
            default = {},
            doc = """
Dictionary of entitlements keys and expected values for that key. This test will
fail if the key does not exist or if it it doesn't match the value. * can be
used as a wildcard, similar to how it works in shell scripts.
""",
        ),
        "not_expected_keys": attr.string_list(
            default = [],
            doc = """
Array of plist keys that should not exist. The test will fail if the key
exists.
""",
        ),
        "_allowlist_function_transition": attr.label(
            default = "@bazel_tools//tools/allowlists/function_transition_allowlist",
        ),
        "_xcode_config": attr.label(
            default = configuration_field(
                name = "xcode_config_label",
                fragment = "apple",
            ),
        ),
    },
    fragments = ["apple"],
    test = True,
)
