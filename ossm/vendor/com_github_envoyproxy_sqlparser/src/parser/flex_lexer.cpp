#line 1 "flex_lexer.cpp"

#line 3 "flex_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define hsql__create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer hsql__create_buffer
#endif

#ifdef yy_delete_buffer
#define hsql__delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer hsql__delete_buffer
#endif

#ifdef yy_scan_buffer
#define hsql__scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer hsql__scan_buffer
#endif

#ifdef yy_scan_string
#define hsql__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string hsql__scan_string
#endif

#ifdef yy_scan_bytes
#define hsql__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes hsql__scan_bytes
#endif

#ifdef yy_init_buffer
#define hsql__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer hsql__init_buffer
#endif

#ifdef yy_flush_buffer
#define hsql__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer hsql__flush_buffer
#endif

#ifdef yy_load_buffer_state
#define hsql__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state hsql__load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define hsql__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer hsql__switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define hsql_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state hsql_push_buffer_state
#endif

#ifdef yypop_buffer_state
#define hsql_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state hsql_pop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define hsql_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack hsql_ensure_buffer_stack
#endif

#ifdef yylex
#define hsql_lex_ALREADY_DEFINED
#else
#define yylex hsql_lex
#endif

#ifdef yyrestart
#define hsql_restart_ALREADY_DEFINED
#else
#define yyrestart hsql_restart
#endif

#ifdef yylex_init
#define hsql_lex_init_ALREADY_DEFINED
#else
#define yylex_init hsql_lex_init
#endif

#ifdef yylex_init_extra
#define hsql_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra hsql_lex_init_extra
#endif

#ifdef yylex_destroy
#define hsql_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy hsql_lex_destroy
#endif

#ifdef yyget_debug
#define hsql_get_debug_ALREADY_DEFINED
#else
#define yyget_debug hsql_get_debug
#endif

#ifdef yyset_debug
#define hsql_set_debug_ALREADY_DEFINED
#else
#define yyset_debug hsql_set_debug
#endif

#ifdef yyget_extra
#define hsql_get_extra_ALREADY_DEFINED
#else
#define yyget_extra hsql_get_extra
#endif

#ifdef yyset_extra
#define hsql_set_extra_ALREADY_DEFINED
#else
#define yyset_extra hsql_set_extra
#endif

#ifdef yyget_in
#define hsql_get_in_ALREADY_DEFINED
#else
#define yyget_in hsql_get_in
#endif

#ifdef yyset_in
#define hsql_set_in_ALREADY_DEFINED
#else
#define yyset_in hsql_set_in
#endif

#ifdef yyget_out
#define hsql_get_out_ALREADY_DEFINED
#else
#define yyget_out hsql_get_out
#endif

#ifdef yyset_out
#define hsql_set_out_ALREADY_DEFINED
#else
#define yyset_out hsql_set_out
#endif

#ifdef yyget_leng
#define hsql_get_leng_ALREADY_DEFINED
#else
#define yyget_leng hsql_get_leng
#endif

#ifdef yyget_text
#define hsql_get_text_ALREADY_DEFINED
#else
#define yyget_text hsql_get_text
#endif

#ifdef yyget_lineno
#define hsql_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno hsql_get_lineno
#endif

#ifdef yyset_lineno
#define hsql_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno hsql_set_lineno
#endif

#ifdef yyget_column
#define hsql_get_column_ALREADY_DEFINED
#else
#define yyget_column hsql_get_column
#endif

#ifdef yyset_column
#define hsql_set_column_ALREADY_DEFINED
#else
#define yyset_column hsql_set_column
#endif

#ifdef yywrap
#define hsql_wrap_ALREADY_DEFINED
#else
#define yywrap hsql_wrap
#endif

#ifdef yyget_lval
#define hsql_get_lval_ALREADY_DEFINED
#else
#define yyget_lval hsql_get_lval
#endif

#ifdef yyset_lval
#define hsql_set_lval_ALREADY_DEFINED
#else
#define yyset_lval hsql_set_lval
#endif

#ifdef yyget_lloc
#define hsql_get_lloc_ALREADY_DEFINED
#else
#define yyget_lloc hsql_get_lloc
#endif

#ifdef yyset_lloc
#define hsql_set_lloc_ALREADY_DEFINED
#else
#define yyset_lloc hsql_set_lloc
#endif

#ifdef yyalloc
#define hsql_alloc_ALREADY_DEFINED
#else
#define yyalloc hsql_alloc
#endif

#ifdef yyrealloc
#define hsql_realloc_ALREADY_DEFINED
#else
#define yyrealloc hsql_realloc
#endif

#ifdef yyfree
#define hsql_free_ALREADY_DEFINED
#else
#define yyfree hsql_free
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define hsql_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 174
#define YY_END_OF_BUFFER 175
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1250] =
    {   0,
        0,    0,  171,  171,    2,    2,  175,  173,    4,    4,
      173,  173,  162,  169,  162,  162,  165,  162,  162,  162,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  173,  162,  171,  172,    2,
        2,    3,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    4,
      157,    0,    1,  165,  164,  163,  159,  158,  156,  160,

      168,  168,  168,  168,  168,  168,  129,  168,  130,  168,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  131,  168,  168,  168,  132,  133,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  134,  135,  168,  136,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  137,  168,  168,  168,  168,
      168,  168,  168,  168,  168,    0,  161,  171,  170,    2,
        2,    2,    2,    1,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,  166,  163,
      115,  168,  116,  168,  168,  117,  168,  118,  168,  168,

      168,  168,  168,  168,  168,  168,  168,  119,  168,  141,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      120,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  121,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  122,
      168,  168,  123,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  124,  168,  168,  125,  168,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  126,  168,  168,  168,  168,
      168,  127,  168,  168,  168,  168,  168,  128,  168,  168,

      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      167,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,  168,  168,  168,  168,  168,  168,
       85,  168,   86,   87,  168,  168,  168,  168,  168,   88,
       89,  168,  168,  168,  168,  168,   90,  168,  168,  168,
       91,   92,  168,  168,  168,  168,  168,  168,  168,  168,
      168,   94,  168,   95,   96,  168,  168,   97,  168,  168,
       98,  168,  140,  168,  168,  168,  168,  168,  168,  168,
      168,   99,  168,  100,  101,  102,  168,  168,  104,  168,

      105,  168,  168,  168,  168,  168,  106,  168,  168,  168,
      168,  168,  168,  168,  107,  168,  168,  168,  168,  168,
      168,  168,  154,  168,  168,  168,  108,  168,  168,  168,
      168,  168,  168,  109,  110,  111,  144,  168,  168,  168,
      168,  168,  168,  168,  168,  112,  168,  113,  168,  114,
      143,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,   64,   65,
      168,   66,  168,  168,  168,  168,  168,  168,  168,  168,
       67,  168,  168,  168,  168,  168,   68,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  145,  168,   69,

      168,   70,  168,  168,  168,  168,  103,  168,   71,  168,
       72,  168,  168,  168,  168,   73,  153,   74,  168,   75,
       76,  168,  142,  168,  168,  168,  168,   77,   78,  168,
      168,  168,  168,   79,  168,  168,  168,   80,  168,  168,
      168,  168,  168,  168,   81,  168,  168,  168,  168,   82,
      168,  168,  168,   83,  168,  168,  168,   84,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,  168,   37,
      168,  168,  168,   38,  168,  168,   39,  168,  168,  168,
      168,   40,   41,  168,   42,  168,   43,   45,  168,   46,
      168,  168,  149,   48,   49,  168,  168,   50,   51,   93,
       52,  168,  168,   53,  168,  139,  168,  168,   54,  168,
      168,  168,  168,  168,   55,  168,  168,   56,  138,   57,

       58,  168,  168,   59,  168,  168,  168,  168,   60,   61,
       62,   63,  168,  168,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
       19,   20,   21,  168,   22,  168,   23,  168,  168,   24,
       25,  168,  168,   44,   26,   27,   47,  168,   28,   29,

      168,  168,   30,  168,  168,  168,  168,   31,   32,  147,
      168,   33,   34,  168,  168,  168,  168,  168,   35,   36,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
      168,  168,   14,  168,   15,  152,  168,  168,  168,   16,
      168,  168,  168,   17,  155,  168,  168,  168,   18,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,   12,  168,

       13,  168,  168,    9,  168,  168,  168,  148,   10,  168,
       11,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,  146,    7,  168,  168,  151,    8,
      150,    2,    2,    2,    2,    2,    2,    2,  168,  168,
        2,    2,  168,    6,    2,    2,    5,    2,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    6,    1,    7,    6,
        6,    6,    6,    6,    8,    9,    6,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,    6,    6,   11,
       12,   13,    6,   14,   15,   16,   17,   18,   19,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
        6,    1,    6,    6,   41,   42,   43,   44,   45,   46,

       47,   48,   49,   50,   51,   52,   53,   54,   55,   56,
       57,   58,   59,   60,   61,   62,   63,   64,   65,   66,
       67,   68,    6,   69,    6,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[70] =
    {   0,
        1,    1,    2,    1,    3,    1,    4,    1,    1,    5,
        1,    1,    1,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    6,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    1
    } ;

static const flex_int16_t yy_base[1259] =
    {   0,
        0,    0,  508,  488,   69,    0,  492, 4984,  137,  139,
      411,    0, 4984, 4984,  135,  391,  137,  136,  386,  382,
        0,  132,  132,  140,  138,  149,  201,  142,  189,  245,
      127,  144,  188,  190,  213,  254,  236,  131,  234,  301,
      349,  283,  244,  275,  187,    0,  321,    0,  380,    0,
      218,  220,  371,  335,    0,    0,  221,  314,  216,  291,
      295,  293,  409,  478,  530,  583,  636,  685,  738,  289,
      409,  787,  290,  303,  406,  407,  840,  889,  462,  341,
      408,  940,  993,  484,  542,  560,  315,  250,  214,  330,
     4984,  275, 4984,  343,  265,  259, 4984, 4984, 4984, 4984,

        0,  242,  293,  335,  359,  306,  328,  473,    0,  358,
      352,  413,  414,  339,  463,  580,  467,  344,  405,  407,
      526,  425,  602,  418,  533,  479,  481,  489,  534,  535,
      537,  581,  633,  533,    0,  545,  552,  588,  681,  592,
      601,  590,  615,  642,  663,  624,  630,  634,  640,  643,
      662,  677,  687,    0,  676,  694,  683,  689,  707,  707,
      708,  732,  723,  710,  726,  757,  727,  734,  753,  754,
      755,  756,  785,  781,  776,  774,  774,  795,  798,  799,
      798,  806,  810,  799,  824,  212, 4984,    0, 4984,    0,
      383,    0,  245,    0,  440,  233,  228,    0,    0,    0,

        0,  843,  845,  867,  879,  925,  916,  855,  919,  849,
      956,  981, 1007,  972,  995, 1030, 1083, 1019, 1037, 1026,
     1052, 1088, 1093, 1144, 1082, 1126, 1129, 1132, 1143, 1158,
     1169, 1175, 1182, 1212, 1076,  974, 1200, 1211, 1205, 1262,
     1236, 1218, 1247, 1268, 1272, 1325, 1274, 1298, 1319, 1312,
     1337, 1341, 1354, 1363, 1265, 1366, 1388, 1375, 1384, 1400,
     1401, 1406, 1430, 1417, 1283, 1440, 1455, 1446, 1473, 1480,
     1489, 1482, 1492, 1516, 1379, 1511, 1495, 1522, 1541, 1526,
     1551, 1565, 1562, 1560, 1577, 1591,  172,    0, 4984,  198,
        0,  846,    0,  852,  869,    0,  917,    0,  921,  940,

      973, 1140, 1015, 1033, 1108, 1074, 1057,    0, 1435,    0,
     1102, 1126, 1602, 1130, 1162, 1186, 1254, 1247, 1314, 1323,
        0, 1348, 1370, 1479, 1542, 1551, 1554, 1554, 1574, 1594,
     1605,    0, 1596, 1600, 1615, 1598, 1613, 1614, 1618, 1608,
     1609, 1614, 1618, 1625, 1623, 1634, 1632, 1637, 1638, 1643,
     1625, 1638,    0, 1633, 1650, 1650, 1657, 1659, 1664, 1661,
      135, 1665, 1652, 1655, 1656,    0, 1666, 1661, 1663, 1675,
     1680, 1683, 1688, 1678, 1678, 1682, 1694, 1697, 1687, 1682,
     1696, 1690, 1706, 1699, 1710,    0, 1695, 1699, 1701, 1706,
     1716,    0, 1713, 1718, 1713, 1720, 1730,    0, 1736, 1723,

     1729, 1744, 1734, 1730, 1750, 1731, 1735, 1746, 1750, 1747,
     4984,    0,  149, 1762, 1765, 1766, 1769, 1772, 1775, 1784,
     1791, 1796, 1809, 1798, 1830, 1825, 1815, 1849, 1852, 1840,
     1842, 1865, 1851, 1867, 1898, 1905, 1883, 1884, 1908, 1910,
     1934, 1896, 1940, 1921, 1943, 1937, 1952, 1970, 1959, 1961,
     1983, 1986, 1976, 1999, 2008, 2022, 2013, 2029, 2035, 2040,
     2062, 2064, 2065, 2076, 2086, 2087, 2103, 2101, 2098, 2116,
     2102, 2132, 2133, 2138, 2147, 2142, 2157, 2145, 2159, 2168,
     2198, 2203, 2174, 2189, 2208, 2213, 2215, 2224, 2214, 2247,
     2253, 2250, 2265, 2259, 2260, 2290, 2291, 2304, 2309, 2322,

     2303, 2334, 2340, 2344, 2353, 2346, 2376, 2359, 2365, 2371,
     2390, 2400, 2403, 2402, 2378, 2421, 2427, 2425, 2452, 2434,
     2436, 2457, 2471, 2476, 2478, 2488, 2487, 2492, 2510, 2517,
     2533, 2544, 2521,    0, 1873, 1878, 1907, 1944, 1964, 2010,
        0, 2020,    0, 2021, 2038, 2037, 2059, 2074, 2127, 2158,
        0, 2171, 2176, 2201, 2233, 2259,    0, 2276, 2280, 2314,
        0,    0, 2320, 2324, 2345, 2364, 2396, 2446, 2469, 2467,
     2502,    0, 2507,    0,    0, 2527, 2516,    0, 2530,  113,
        0, 2533,    0, 2535, 2552, 2541, 2538, 2552, 2550, 2553,
     2566,    0, 2566,    0,    0,    0, 2562, 2564,    0, 2576,

        0, 2573, 2586, 2574, 2587, 2580,    0, 2597, 2597, 2588,
     2586, 2587, 2594, 2599,    0, 2608, 2612, 2603, 2602, 2617,
     2602, 2604,    0, 2612, 2613, 2626,    0, 2629, 2629, 2619,
     2635, 2629, 2636,    0,    0, 2628,    0, 2646, 2636, 2630,
     2653, 2636, 2651, 2654, 2652,    0, 2640,    0, 2658,    0,
        0, 2665, 2675, 2669, 2671, 2687, 2676, 2690, 2702, 2692,
     2705, 2731, 2721, 2714, 2732, 2743, 2748, 2736, 2754, 2770,
     2772, 2788, 2781, 2787, 2797, 2806, 2804, 2793, 2799, 2830,
     2833, 2837, 2843, 2849, 2846, 2855, 2860, 2890, 2873, 2884,
     2886, 2895, 2900, 2902, 2905, 2926, 2909, 2916, 2939, 2940,

     2942, 2945, 2956, 2952, 2975, 2966, 2978, 3009, 2985, 3008,
     2992, 2996, 3018, 3027, 3021, 3025, 3051, 3032, 3048, 3034,
     3074, 3064, 3065, 3077, 3083, 3090, 3104, 3107, 3108, 3126,
     3119, 3130, 3133, 3144, 3159, 3163, 3170, 3160, 3169, 3175,
     3196, 3200, 3215, 3182, 3186, 3222, 3225, 3219, 3236, 3229,
     3231, 3238, 3255, 3252, 3262, 3276, 3271, 3298, 3292, 3309,
     3305, 3314, 3308, 3327, 3321, 3330, 3331, 3332,    0,    0,
     2645,    0, 2680, 2766, 2829, 2921, 2952, 2989, 3062, 3115,
        0, 3181, 3255, 3271, 3295, 3316,    0, 3323, 3339, 3354,
     3347, 3363, 3349, 3350, 3353, 3364, 3372,    0, 3358,    0,

     3366,    0, 3372, 3366, 3368, 3383,    0, 3369,    0, 3385,
        0, 3371, 3387, 3374, 3383,    0,    0,    0, 3381,    0,
        0, 3397,    0, 3403, 3400, 3389, 3397,    0,    0, 3407,
     3393, 3397, 3404,    0, 3419, 3422, 3417,    0, 3427, 3425,
     3411, 3429, 3433, 3426, 3419, 3424, 3430, 3425, 3445,    0,
     3442, 3444, 3444,    0, 3432, 3454, 3457,    0, 3455, 3459,
     3464, 3460, 3462, 3466, 3477, 3491, 3500, 3502, 3496, 3473,
     3498, 3527, 3532, 3529, 3533, 3538, 3545, 3554, 3559, 3556,
     3571, 3572, 3583, 3590, 3594, 3612, 3617, 3601, 3627, 3628,
     3639, 3630, 3651, 3652, 3657, 3634, 3664, 3668, 3666, 3673,

     3689, 3695, 3702, 3704, 3706, 3707, 3708, 3719, 3720, 3725,
     3729, 3731, 3742, 3764, 3763, 3765, 3769, 3775, 3776, 3781,
     3787, 3805, 3814, 3800, 3816, 3821, 3839, 3832, 3854, 3838,
     3857, 3876, 3888, 3879, 3881, 3893, 3910, 3917, 3894, 3915,
     3920, 3926, 3931, 3944, 3955, 3956, 3961, 3950, 3535,    0,
     3558, 3578, 3729, 3744, 3758, 3775,    0, 3784, 3842, 3830,
     3862,    0,    0, 3865,    0, 3870, 3940,    0, 3949,    0,
     3953, 3951,    0,    0,    0, 3958, 3953,    0,    0,    0,
        0, 3969, 3986,    0, 3983,    0, 3981, 3995,    0, 3997,
     3980, 3992, 4000, 3982,    0, 4005, 4008, 3993,    0,    0,

        0, 4001, 4002,    0, 4016, 4017, 4021, 4003,    0,    0,
        0,    0, 4007, 4015, 4027, 4029, 4042, 4032, 4038, 4054,
     4043, 4065, 4067, 4069, 4078, 4088, 4110, 4092, 4094, 4101,
     4105, 4119, 4124, 4128, 4134, 4135, 4141, 4145, 4146, 4157,
     4159, 4171, 4170, 4175, 4180, 4181, 4186, 4197, 4196, 4202,
     4211, 4213, 4220, 4236, 4226, 4251, 4237, 4249, 4242, 4258,
     4263, 4267, 4294, 4282, 4273, 4288, 4289, 4298, 4303, 4307,
     4329, 4332, 4338, 4339, 4341, 4343, 4344, 4345, 4368, 4378,
        0,    0,    0, 4031,    0, 4164,    0, 4272, 4280,    0,
        0, 4304, 4349,    0,    0,    0,    0, 4370,    0,    0,

     4377, 4369,    0, 4370, 4377, 4390, 4384,    0,    0,    0,
     4380,    0,    0, 4395, 4386, 4385, 4393, 4404,    0,    0,
     4410, 4414, 4415, 4417, 4419, 4420, 4421, 4424, 4450, 4431,
     4433, 4456, 4455, 4457, 4460, 4466, 4473, 4487, 4489, 4490,
     4502, 4496, 4492, 4513, 4525, 4511, 4536, 4523, 4527, 4529,
     4548, 4542, 4552, 4565, 4566, 4582, 4581, 4578, 4583, 4588,
     4395, 4578, 4578, 4584,    0,    0, 4594, 4590, 4599,    0,
     4611, 4606, 4612,    0,    0, 4602, 4623, 4613,    0, 4628,
     4634, 4639, 4645, 4635, 4638, 4664, 4657, 4678, 4675, 4689,
     4694, 4690, 4701, 4708, 4711, 4713, 4732, 4720,    0, 4627,

        0, 4697, 4703,    0, 4726, 4714, 4731,    0,    0, 4747,
        0, 4747, 4750, 4757, 4763, 4766, 4764, 4796, 4769, 4790,
     4781, 4799, 4803, 4806,    0,    0, 4750, 4772,    0,    0,
        0, 4813, 4820, 4835, 4822, 4825, 4836, 4846, 4806, 4823,
     4857, 4858, 4832,    0, 4859, 4862,    0, 4869, 4984, 4936,
     4942,  139, 4948, 4953, 4959, 4965, 4971, 4977
    } ;

static const flex_int16_t yy_def[1259] =
    {   0,
     1249,    1, 1250, 1250, 1249,    5, 1249, 1249, 1249, 1249,
     1249, 1251, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249,
     1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252,
     1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252,
     1252, 1252, 1252, 1252, 1252, 1253, 1249, 1254, 1249, 1255,
     1255, 1249, 1255, 1256, 1255, 1255, 1255, 1255, 1255, 1255,
     1255, 1255, 1257, 1257,   64,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65, 1258, 1255, 1249,
     1249, 1251, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249,

     1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252,
     1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252,
     1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252,
     1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252,
     1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252,
     1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252,
     1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252,
     1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252,
     1252, 1252, 1252, 1252, 1252, 1253, 1249, 1254, 1249, 1255,
     1255, 1255, 1256, 1255, 1255, 1255, 1255, 1255, 1255, 1255,

     1255,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65, 1258, 1255, 1249, 1249,
     1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252,

     1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252,
     1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252,
     1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252,
     1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252,
     1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252,
     1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252,
     1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252,
     1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252,
     1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252,
     1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252,

     1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252,
     1249, 1255, 1255,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,

       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65, 1255, 1252, 1252, 1252, 1252, 1252, 1252,
     1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252,
     1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252,
     1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252,
     1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252,
     1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252,
     1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252,

     1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252,
     1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252,
     1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252,
     1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252,
     1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252,
     1252,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,

       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65, 1252, 1252,
     1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252,
     1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252,
     1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252,

     1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252,
     1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252,
     1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252,
     1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252,
     1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252,
     1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,

       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65, 1252, 1252,
     1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252,
     1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252,
     1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252,
     1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252,
     1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252,

     1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252,
     1252, 1252, 1252, 1252,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
     1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252,
     1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252,

     1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252,
     1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
     1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252,
     1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65, 1252, 1252,

     1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252,
     1252,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65, 1252, 1252, 1252, 1252, 1252, 1252,
     1252,   65,   65,   65,   65,   65,   65,   65, 1252, 1252,
       65,   65, 1252, 1252,   65,   65, 1252,   65,    0, 1249,
     1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249
    } ;

static const flex_int16_t yy_nxt[5054] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   44,   21,   45,   21,
        8,   46,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   21,   45,   21,   47,   50,
       51,   52,   53,   54,   55,   56,   57,   58,   59,   60,
       61,   62,   63,   64,   65,   66,   67,   68,   69,   70,
       71,   72,   73,   74,   75,   76,   77,   78,   79,   80,

       81,   82,   83,   84,   85,   86,   63,   87,   63,   50,
       88,   64,   65,   66,   67,   68,   69,   70,   71,   72,
       73,   74,   75,   76,   77,   78,   79,   80,   81,   82,
       83,   84,   85,   86,   63,   87,   63,   89,   90,   90,
       90,   90,   93,  101,   94,   96,   94,   97,   98,  102,
      108,  103,  115,  804,  110,  141,  116,  104,  413,  105,
      117,  111,  142,  106,  107,  161,  118,  130,  112,  119,
      109,  113,  114,  131,  120,  602,  121,  102,  108,  103,
      115,  122,  110,  141,  116,  104,  123,  105,  117,  111,
      142,  106,  107,  161,  118,  130,  112,  119,  109,  113,

      114,  131,  120,  132,  121,  185,  143,  290,  146,  122,
      144,  133,  147,  534,  123,  124,  145,  134,  148,  191,
       90,   90,   90,  125,  197,  195,  126,  149,  194,  127,
      195,  132,  128,  185,  143,  129,  146,  413,  144,  133,
      147,  150,  196,  124,  145,  134,  148,  151,  152,  412,
      158,  125,  162,  411,  126,  149,  163,  127,  181,  291,
      128,  159,  164,  129,  135,  136,  182,  160,  290,  150,
      137,  138,  139,  153,   95,  151,  152,  140,  158,  289,
      162,  154,  288,  155,  163,  156,  181,  291,  157,  159,
      164,  190,  135,  136,  182,  160,  183,  184,  137,  138,

      139,  153,  198,  199,  201,  140,  200,  202,  202,  154,
      178,  155,  179,  156,  231,  180,  157,  165,  242,  166,
      232,  243,  167,  196,  183,  184,  292,  202,  202,  168,
      169,   90,   90,  286,  170,  202,  202,  297,  178,  190,
      179,  202,  231,  180,  298,  165,  242,  166,  232,  243,
      167,   96,   94,  202,  292,  202,  202,  168,  169,  202,
      293,  286,  170,  171,  172,  297,  303,  173,  294,  202,
      174,  175,  298,  295,  308,  262,  296,  176,  317,  202,
      177,  202,  192,  301,  191,   90,  189,  202,  293,  187,
      302,  171,  172,  100,  303,  173,  294,   99,  174,  175,

       95,  295,  308,  262,  296,  176,  317,  202,  177,  190,
      190,  301,  190,  190,  190,  190,  190,  190,  302,  190,
      190,  190,   91,  233,  244,  247,  263,  202,  245,  248,
      264,  234,  306,  318,  246,  249,  265,  235,  304,  319,
      305,  322,  307,  328,  202,  202,  202,  202,  197,  195,
      190,  233,  244,  247,  263,  202,  245,  248,  264,  234,
      306,  318,  246,  249,  265,  235,  304,  319,  305,  322,
      307,  328,  202,  202,  202,  202,  259,  190,  190,  190,
      202,  190,  190,  190,  190,  190,  190,  260,  190,  190,
      190, 1249,  299,  261,   49,  203,  309,  204,  315,  316,

      202,  310,  202,  205,  259,  206,  300,  331,  202,  207,
      208,  279,  332,  280,   49,  260,  281,  333, 1249,  190,
      299,  261,  202,  203,  309,  204,  315,  316,  202,  310,
      202,  205, 1249,  206,  300,  331, 1249,  207,  208,  279,
      332,  280,  320,  321,  281,  333,  190,  202,  209,  202,
      202,  329, 1249, 1249, 1249,  202,  282,  202,  330,  334,
      202,  202,  202,  335,  283,  336, 1249,  342,  210, 1249,
      320,  321,  343, 1249,  344,  202,  209,  202,  202,  329,
      202,  284,  285,  202,  282,  202,  330,  334,  202,  202,
      202,  335,  283,  336,  311,  342,  210,  211,  202,  312,

      343,  202,  344, 1249,  212,  313,  202, 1249,  202,  284,
      285,  213,  314,  337,  214,  215,  338,  345,  323,  351,
      324,  202,  311,  352,  325,  211,  202,  312,  353,  202,
     1249,  326,  212,  313,  354,  327, 1249, 1249, 1249,  213,
      314,  337,  214,  215,  338,  345,  323,  351,  324,  202,
      216,  352,  325,  339,  217,  362,  353,  363,  218,  326,
      340,  364,  354,  327,  219,  341,  355,  220,  356,  357,
     1249, 1249, 1249,  365,  202, 1249,  366,  358,  216,  359,
     1249,  339,  217,  362, 1249,  363,  218,  367,  340,  364,
      360,  368,  219,  341,  355,  220,  356,  357,  346,  361,

      347,  365,  202,  202,  366,  358,  369,  359,  348,  370,
      221,  371,  222,  349,  350,  367,  372,  223,  360,  368,
      373,  374,  224,  202, 1249,  375,  346,  361,  347,  376,
      377,  202, 1249, 1249,  369, 1249,  348,  370,  221,  371,
      222,  349,  350,  381,  372,  223,  382,  383,  373,  374,
      224,  202,  225,  375, 1249,  387,  202,  376,  377,  378,
      226,  379, 1249,  227,  380,  388,  228,  389,  390,  229,
      391,  381,  230,  384,  382,  383,  202, 1249, 1249, 1249,
      225,  392,  385,  387,  202, 1249, 1249,  378,  226,  379,
      386,  227,  380,  388,  228,  389,  390,  229,  391,  396,

      230,  384,  397,  398,  202,  202,  236,  237,  399,  392,
      385,  393,  238,  239,  240,  402,  394,  400,  386,  241,
      401,  403,  395,  404,  406,  202, 1249,  396,  408,  405,
      397,  398,  409,  202,  236,  237,  399,  407,  410,  393,
      238,  239,  240,  402,  394,  400, 1249,  241,  401,  403,
      395,  404,  406,  202,  250, 1249,  408,  405,  202, 1249,
      409,  202,  414,  202,  535,  407,  410,  202,  251, 1249,
      536,  421, 1249,  202,  252,  253, 1249, 1249,  202, 1249,
     1249,  202,  250,  202, 1249,  202,  202,  202, 1249,  202,
      414,  202,  535,  202,  537,  202,  251,  202,  536,  421,

      415,  202,  252,  253,  416,  202,  202,  202,  254,  202,
     1249,  202,  417,  202, 1249,  202,  255,  202,  256, 1249,
      257,  202,  537,  258, 1249,  202, 1249,  202,  415, 1249,
     1249,  538,  416,  202,  202,  202,  254,  202,  422,  418,
      417, 1249,  419,  202,  255,  202,  256,  420,  257,  539,
     1249,  258,  423, 1249,  202,  202,  266,  202,  267,  538,
     1249,  268,  202,  202, 1249,  202,  422,  418,  269,  270,
      419,  202, 1249,  271,  202,  420,  540,  539,  202, 1249,
      423,  424,  202, 1249,  266,  202,  267, 1249,  425,  268,
      429,  202,  202, 1249,  202,  426,  269,  270,  541,  202,

      430,  271,  202, 1249,  540, 1249,  202,  272,  273,  424,
      202,  274,  202,  202,  275,  276,  425, 1249,  429,  202,
      202,  277,  202,  426,  278,  202,  541,  202,  430, 1249,
      431,  202,  427,  202,  428,  272,  273,  202,  202,  274,
      202,  202,  275,  276,  202,  202,  544,  202,  202,  277,
      438,  439,  278,  202,  441,  202, 1249,  202,  431,  202,
      427,  202,  428,  432,  202,  202, 1249,  545,  433, 1249,
      202,  440,  202,  202,  544,  202,  202, 1249,  438,  439,
     1249, 1249,  441,  202,  442,  202, 1249, 1249,  548,  549,
      202,  432,  202, 1249,  202,  545,  433,  434,  202,  440,

      202,  202,  435,  202,  443,  444,  202,  451,  436,  445,
      465,  202,  442, 1249,  202,  437,  548,  549,  202, 1249,
      202,  202,  202, 1249,  546,  434,  202,  552,  202,  202,
      435,  202,  443,  444,  202,  451,  436,  445,  465,  202,
      553,  547,  202,  437,  452, 1249,  557,  202,  202,  202,
      202,  453,  546, 1249,  202,  552,  542,  454,  543,  202,
      446,  202,  447,  455,  202, 1249,  448,  202,  553,  547,
      202,  456,  452,  449,  557,  202,  202,  450,  202,  453,
      558,  202,  202,  457,  542,  454,  543,  202,  446,  202,
      447,  455,  202,  202,  448,  202,  202,  458,  202,  456,

      202,  449, 1249,  459,  202,  450, 1249,  202,  558,  202,
      202,  457, 1249,  202,  460,  202, 1249,  461,  202,  559,
      202,  202, 1249,  202,  202,  458, 1249,  466,  202,  202,
      202,  459,  462,  467,  468,  202,  202, 1249,  202,  463,
      475,  202,  460,  202,  464,  461,  202,  559,  202,  202,
      202,  202, 1249, 1249,  202,  466,  202,  202,  202, 1249,
      462,  467,  468,  474,  202,  202,  202,  463,  475,  560,
     1249,  202,  464, 1249,  202, 1249,  561,  202,  202,  469,
      202,  470,  202,  202,  202,  476,  202,  477, 1249,  471,
      202,  474,  202,  202,  472,  473,  478,  560,  479,  480,

      202,  202,  202,  202,  561,  485,  202,  469,  202,  470,
      202,  202,  202,  476,  202,  477,  202,  471,  202,  505,
      202,  202,  472,  473,  478,  486,  479,  480,  202,  202,
      202,  202,  562,  485,  202, 1249,  202,  202,  202,  481,
      202,  482, 1249,  202,  202,  488,  487,  505,  563,  202,
      202, 1249,  483,  486, 1249,  202, 1249,  202,  202,  202,
      562,  484,  564,  202,  202,  202,  490,  481,  491,  482,
      489,  202,  202,  488,  487,  202,  563, 1249,  202,  202,
      483,  202,  492,  202,  202,  202, 1249,  202,  565,  484,
      564,  202,  202,  202,  490, 1249,  491,  519,  489,  493,

      202,  202,  202,  202,  202,  494,  202,  202,  495,  202,
      492, 1249,  202,  202,  497,  496,  565,  202,  202,  498,
      202,  202,  202,  499,  202,  519,  202,  493,  500,  202,
      202, 1249,  202,  494,  202,  202,  495,  504,  202,  202,
     1249,  202,  497,  496,  202,  202,  202,  498,  202,  550,
      202,  499,  202,  551,  202,  202,  500,  501,  202,  502,
     1249,  506,  503,  202,  202,  504,  202,  202,  202, 1249,
     1249,  507,  202,  202,  510, 1249,  202,  550,  202, 1249,
      508,  551, 1249,  202,  202,  501,  202,  502,  509,  506,
      503,  202,  202,  202,  512,  566,  202,  514,  202,  507,

      202,  202,  510,  513,  511, 1249,  202,  202,  508, 1249,
      202,  202,  202,  202, 1249, 1249,  509,  515,  202,  202,
      202,  202,  512,  566,  521,  514,  202,  202,  202,  202,
      202,  513,  511,  202,  202,  202, 1249,  520,  202,  202,
      202,  202,  516,  525,  202,  515,  202,  517,  202,  202,
     1249, 1249,  521,  518,  202,  202,  522,  202,  202,  202,
      202,  202,  202,  523,  202,  520,  524, 1249,  202,  202,
      516,  525,  202,  526,  567,  517,  568,  202,  531,  202,
      529,  518,  202,  202,  522,  569,  570,  202,  202,  202,
      527,  523,  202,  530,  524,  202,  528,  202,  202,  571,

      202,  526,  567,  202,  568,  533,  531,  202,  529,  202,
      532,  202,  572,  569,  570,  202,  554,  202,  527,  573,
      555,  530,  574,  202,  528,  575,  202,  571,  202,  202,
      576,  202,  577,  533,  578,  556,  579,  202,  532,  580,
      572,  581,  582,  202,  554,  583,  584,  573,  555,  585,
      574,  586,  587,  575,  588,  589,  590,  202,  576,  593,
      577,  591,  578,  556,  579,  594,  595,  580,  596,  581,
      582,  592,  597,  583,  584,  598,  599,  585,  600,  586,
      587,  601,  588,  589,  590,  603,  604,  593,  605,  591,
      606,  607,  608,  594,  595,  609,  596,  610,  611,  592,

      597,  612,  613,  598,  599,  615,  600,  616,  617,  601,
      618,  619,  620,  603,  604,  621,  605,  622,  606,  607,
      608,  614,  623,  609,  624,  610,  611,  625,  626,  612,
      613,  627,  628,  615,  629,  616,  617,  630,  618,  619,
      620,  631,  632,  621,  633,  622,  634,  635,  636,  614,
      623,  639,  624,  640,  637,  625,  626,  641,  642,  627,
      628,  643,  629,  638,  644,  630,  645,  646,  647,  631,
      632,  650,  633,  648,  634,  635,  636,  649,  651,  639,
      202,  640,  637,  652,  202,  641,  642,  653, 1249,  643,
      202,  638,  644,  202,  645,  646,  647,  654,  655,  650,

      202,  648,  202,  202,  202,  649,  651,  202,  202,  202,
      202,  652,  202,  202,  202,  653,  202, 1249,  202, 1249,
     1249,  202,  202,  658,  656,  654,  655,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202, 1249,
     1249,  202,  202,  202,  202,  657,  659,  202,  660,  662,
      202,  658,  656,  202, 1249,  202,  661,  202,  202, 1249,
      202,  202,  202,  202,  202,  663,  665,  202,  202,  202,
      202,  202,  666,  657,  659,  202,  660,  662,  202,  667,
      202,  202,  664,  668,  661,  202,  202,  202,  202,  202,
      202,  202,  669,  663,  665,  202,  202,  202,  202,  674,

      666,  202,  675,  202,  769,  202,  202,  667,  202,  770,
      664,  668,  670,  202,  679,  202,  202,  202,  202,  671,
      669,  202,  202,  672, 1249,  677,  202,  674,  202,  202,
      675,  202,  769,  202,  202, 1249,  202,  770,  673,  202,
      670,  676,  679,  202,  202,  771,  202,  671,  202,  202,
      202,  672,  202,  677,  202,  682,  202,  681,  202,  202,
     1249,  202,  202,  678,  202,  680,  673,  202,  683,  676,
      202,  202,  202,  771,  202,  202,  202,  202,  202,  202,
      202,  202,  772,  682,  685,  681,  202,  202,  202,  202,
      202,  678,  686,  680,  689,  773,  683,  202,  202,  202,

      202,  202,  684,  202,  202,  202,  202,  202,  202,  202,
      772,  688,  685,  690,  202,  687,  202,  202,  202, 1249,
      686,  202,  689,  773,  202,  202,  202,  202,  774,  202,
      684,  202,  202, 1249,  775,  776,  202,  202,  692,  688,
      202,  690,  202,  687,  693,  202,  202,  202,  691,  202,
     1249,  202,  202,  202,  202, 1249,  774, 1249,  202,  202,
      202,  695,  775,  776,  777,  202,  692,  202,  202,  694,
     1249,  778,  693,  202,  202,  202,  691, 1249,  202,  202,
      202,  202,  202,  202,  696,  697,  202, 1249,  202,  695,
      779, 1249,  777, 1249,  202,  202, 1249,  694,  698,  778,

      202,  202,  202,  202,  202,  202,  202,  780,  202,  699,
      202,  202,  696,  697,  202,  701,  704,  700,  779,  202,
      706,  202,  202, 1249,  202,  202,  698,  702,  202,  703,
      202,  202,  202,  202,  202,  780,  202,  699,  705,  202,
      202,  202,  202,  701,  704,  700, 1249,  202,  706,  202,
      707,  708,  202,  202,  202,  702,  202,  703, 1249,  781,
      202,  709,  202,  713,  202,  202,  705,  202,  202,  202,
      202,  202,  710,  782,  711,  202,  202,  202,  707,  708,
      202,  714,  202,  202,  202,  202,  715,  781,  202,  709,
      712,  713,  202,  202,  718,  202,  783,  202,  202,  202,

      710,  782,  711,  202,  202,  202,  202,  202,  202,  714,
      784,  202,  202,  202,  715,  716,  202,  717,  712, 1249,
      202,  202,  718,  202,  783,  202,  202,  202,  720,  719,
     1249,  202,  202,  202,  202,  202,  202, 1249,  784,  785,
      202,  202,  202,  716,  202,  717,  202,  721,  722,  202,
     1249,  202,  202,  202,  202,  202,  720, 1249,  723,  202,
      202,  202,  202, 1249,  202,  202,  786,  785,  202,  202,
      202,  202,  724,  787,  202,  721,  722,  728,  729,  202,
      202,  202,  726,  202,  725,  202,  723,  727,  202, 1249,
      202,  202,  788,  202,  786, 1249,  202,  202,  202,  202,

      724,  787,  789,  202,  730,  728,  729, 1249,  202,  202,
      726,  202,  725,  202, 1249,  727,  202,  736,  732,  202,
      788,  202,  202,  731, 1249,  202,  202,  202,  202,  202,
      789,  202,  730,  733, 1249,  734,  202,  202,  735,  790,
      202,  202,  202, 1249, 1249,  736,  732,  202,  791,  202,
      202,  731,  202,  792, 1249,  202,  202,  202,  202,  737,
      202,  733,  202,  734,  741,  739,  735,  790,  202,  202,
      202,  202,  202,  738,  793,  202,  791,  743,  202, 1249,
      202,  792,  202,  202,  202,  740,  202,  737,  202,  202,
      202,  202,  741,  739,  202, 1249,  202,  202,  794,  202,

      202,  738,  793,  202,  742,  743,  202,  744,  202,  202,
      202,  202,  202,  740,  202, 1249,  202,  202,  202,  202,
      202,  202,  202,  745,  202,  202,  794,  748,  202,  795,
     1249,  202,  742,  746,  747,  744,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202, 1249,  202,  202,
      749,  745,  753,  750,  202,  748,  202,  795,  751,  202,
      796,  746,  747,  202, 1249,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  754, 1249, 1249,  749,  752,
      753,  750,  202,  797,  755,  798,  751,  202,  796,  202,
      202,  202,  759,  202,  202,  202,  202, 1249,  202,  756,

      202,  757,  202,  754,  758,  202,  202,  752,  762,  202,
      202,  797,  755,  798,  202,  760,  202,  202,  202,  799,
      759,  761,  202,  202,  202,  202,  202,  756,  202,  757,
      202, 1249,  758,  202,  202,  202,  762,  202,  202,  202,
      800,  801,  202,  760,  202,  802,  763,  799,  202,  761,
      764,  202,  768,  202,  202,  202,  202,  803,  202,  202,
      765,  805,  202,  202,  766,  767,  806,  202,  800,  801,
      807,  202,  808,  802,  763,  809,  202,  810,  764,  202,
      768,  811,  202,  202,  812,  803,  813,  202,  765,  805,
      202,  815,  766,  767,  806,  816,  817,  814,  807,  202,

      808,  818,  819,  809,  820,  810,  821,  822,  823,  811,
      202,  824,  812,  825,  813,  826,  827,  828,  829,  815,
      830,  831,  832,  816,  817,  814,  833,  834,  835,  818,
      819,  836,  820,  837,  821,  822,  823,  838,  839,  824,
      840,  825,  841,  826,  827,  828,  829,  842,  830,  831,
      832,  843,  844,  845,  833,  834,  835,  846,  847,  836,
      848,  837,  849,  850,  851,  838,  839,  852,  840,  853,
      841,  854,  855,  856,  857,  842,  858, 1249, 1249,  843,
      844,  845, 1249,  202,  949,  846,  847,  202,  848,  202,
      849,  850,  851,  202,  864,  852,  859,  853,  950,  854,

      855,  856,  857,  202,  858,  202,  860,  861,  202,  862,
      202,  202,  949,  202,  202,  202,  865,  202,  863,  866,
      202,  202,  864,  202,  859,  202,  950, 1249,  202, 1249,
      202,  202,  202,  202,  860,  861,  202,  862,  202,  202,
      202,  202,  202,  202,  865,  869,  863,  866,  202,  202,
      202,  202,  202,  202,  202,  868,  202,  867,  202,  202,
      202,  202, 1249,  872, 1249,  870,  202,  202,  202,  202,
      202,  202,  202,  869,  202,  871, 1249,  202,  202,  873,
      202,  202,  202,  868,  951,  867,  202,  202,  202,  202,
      202,  872,  202,  870,  202,  877, 1249,  202,  202,  202,

      202, 1249,  202,  871,  874,  202,  202,  873,  202,  202,
      875,  202,  951,  878,  202,  202,  202,  202,  202,  202,
      202,  876,  202,  877,  202,  202,  202,  202,  879,  880,
     1249,  202,  874,  202,  202,  202,  202,  202,  875,  202,
     1249,  878,  202,  202,  202,  202,  952,  202,  202,  876,
      202,  202,  202,  202,  202,  202,  879,  880,  881,  202,
      886,  202,  882,  202,  202,  202,  883,  202,  202,  887,
      202,  202,  202,  202,  952,  202,  202,  884,  888,  202,
     1249,  202,  885,  202,  202, 1249,  881,  202,  886,  202,
      882,  202,  202,  202,  883,  202,  202,  887,  202,  202,

     1249,  202,  202,  202,  202,  884,  888,  889,  202,  202,
      885,  202,  202,  202,  891,  202, 1249,  890,  202,  202,
      202,  202,  202,  202,  202, 1249,  202,  202,  202, 1249,
      202,  892,  202,  202,  202,  889,  202,  953,  202,  202,
      202,  202,  891,  202,  202,  890,  202,  202,  202,  894,
      202,  202,  202,  893,  202,  202,  202,  202,  202,  892,
      202,  202,  202,  897,  202,  953,  202,  895,  202, 1249,
      202,  202,  202,  896,  202,  202, 1249,  202,  202,  954,
      202,  893,  202,  202,  202,  202,  202,  898,  202,  899,
      202,  897,  202,  202,  202,  895,  202,  901,  202, 1249,

      900,  896,  202,  202,  202,  202,  202,  954,  202,  902,
      202,  202,  202,  202,  202,  898,  202,  899,  202, 1249,
      955,  202,  202,  202,  202,  901,  202,  202,  900,  903,
      202,  202,  202,  905,  202, 1249,  202,  902,  202,  202,
      904,  202,  202,  202,  202,  202,  202,  202,  955, 1249,
      202,  202,  910,  907,  202,  202,  202,  903,  202,  202,
      906,  905,  202,  202,  202,  202,  202,  202,  904,  202,
      202,  202,  202,  202,  202,  202,  908,  909,  202, 1249,
      910,  907,  202,  202,  202,  913,  202,  202,  906,  202,
      956,  202,  202,  202,  202,  202,  914,  202,  202,  915,

      202,  202,  202,  202,  908,  909,  911,  912,  916, 1249,
      202,  202,  202,  913,  202,  202, 1249,  202,  956, 1249,
      202,  202,  202,  202,  914,  202,  202,  915,  202,  202,
      202,  202,  917,  957,  911,  912,  916,  202,  918,  919,
      202,  921,  202,  202,  202,  202,  202,  922,  202,  202,
      202,  202,  920,  202,  202, 1249,  202,  202,  923, 1249,
      917,  957,  202, 1249,  202,  202,  918,  919,  202,  921,
      202,  202,  202,  202,  202,  922,  202,  202,  202,  202,
      920,  202,  202,  924,  926,  202,  923,  202,  202,  925,
      202,  927,  202,  202, 1249,  958,  202,  202,  202,  202,

      202,  202,  928, 1249,  932,  202,  202,  202,  202,  202,
      202,  924,  926,  202,  202,  202,  202,  925,  202,  927,
      202,  202,  929,  958,  202,  202,  202,  930,  202,  202,
      928,  931,  932,  202,  202,  202,  202,  935,  202, 1249,
      202,  202,  202,  202,  933, 1249,  202,  202,  202,  202,
      929,  937,  202,  202,  202,  930,  202,  202,  934,  931,
      202,  202,  202,  202,  936,  935,  202,  202,  202,  202,
      202,  202,  933,  202,  202,  202,  202,  202,  939,  937,
      202,  202,  202,  959,  202,  202,  934,  938,  202,  202,
      202,  202,  936,  202,  202,  202,  960,  202,  202, 1249,

      202,  202,  202,  940,  202,  941,  939, 1249,  202,  202,
      202,  959,  942,  961,  202,  938,  202,  202,  202, 1249,
     1249,  202,  202,  945,  960,  943,  202,  202,  202,  944,
      202,  940,  202,  941,  962,  946,  202,  202,  202,  202,
      942,  961,  202,  202,  202,  202,  202,  202,  948,  202,
      202,  945,  202,  943,  202,  202,  963,  944,  202,  202,
      202,  947,  962,  946,  202,  202,  964,  202,  202,  202,
      202,  202,  965,  202,  202,  202,  948,  202,  202,  966,
      202,  967,  968,  969,  963,  970,  971,  202,  972,  947,
      973,  974,  975,  202,  964,  976,  202,  202,  202,  977,

      965,  978,  979,  980,  981,  982,  983,  966,  984,  967,
      968,  969,  985,  970,  971,  986,  972,  987,  973,  974,
      975,  988,  989,  976,  990,  991,  992,  977,  993,  978,
      979,  980,  981,  982,  983,  994,  984,  995,  996,  997,
      985,  998,  999,  986, 1000,  987, 1001, 1002, 1003,  988,
      989, 1004,  990,  991,  992, 1005,  993, 1006, 1007, 1008,
     1009, 1010, 1011,  994, 1012,  995,  996,  997, 1013,  998,
      999, 1014, 1000,  202, 1001, 1002, 1003,  202,  202, 1004,
     1016, 1249,  202, 1005, 1017, 1006, 1007, 1008, 1009, 1010,
     1011, 1023, 1012,  202, 1018,  202, 1013,  202,  202, 1014,

      202,  202,  202, 1015,  202,  202,  202, 1019, 1016,  202,
      202,  202, 1017, 1249,  202,  202,  202, 1249,  202, 1023,
      202,  202, 1018,  202, 1022,  202,  202, 1020,  202,  202,
      202, 1015,  202, 1021,  202, 1019,  202,  202,  202,  202,
      202, 1024,  202,  202,  202,  202,  202,  202,  202, 1249,
      202, 1027, 1022, 1081, 1026, 1020, 1028,  202, 1249, 1249,
     1025, 1021,  202,  202,  202,  202,  202,  202,  202, 1024,
      202,  202,  202,  202, 1031,  202,  202,  202,  202, 1027,
     1249, 1081, 1026,  202, 1028, 1082, 1030, 1029, 1025,  202,
     1033,  202,  202,  202,  202,  202, 1083,  202,  202,  202,

      202,  202, 1031, 1032,  202,  202, 1249, 1249,  202,  202,
      202,  202,  202, 1082, 1030, 1029, 1034,  202, 1033,  202,
      202,  202,  202, 1035, 1083,  202, 1036, 1249,  202,  202,
      202, 1032,  202, 1038, 1037,  202,  202,  202,  202,  202,
      202, 1249, 1249, 1249, 1034,  202,  202,  202,  202,  202,
      202, 1035, 1044, 1249, 1036,  202,  202,  202,  202, 1039,
      202, 1038, 1037,  202, 1040,  202,  202,  202,  202,  202,
      202, 1041,  202,  202,  202,  202,  202,  202,  202, 1249,
     1044, 1042,  202,  202,  202,  202,  202, 1039, 1043,  202,
      202, 1046, 1040,  202,  202,  202,  202,  202,  202, 1041,

      202, 1045,  202,  202,  202,  202,  202,  202, 1249, 1042,
      202,  202,  202,  202,  202, 1249, 1043,  202,  202, 1046,
     1048, 1249,  202,  202,  202,  202,  202,  202, 1047, 1045,
      202, 1050,  202,  202,  202,  202, 1049,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202, 1048, 1052,
      202, 1051,  202,  202,  202,  202, 1047,  202,  202, 1050,
      202,  202, 1084,  202, 1049,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202, 1085, 1052, 1053, 1051,
      202,  202,  202,  202, 1054,  202,  202,  202,  202, 1086,
     1084,  202, 1249,  202,  202,  202, 1056,  202, 1055, 1057,

     1087,  202,  202,  202, 1085,  202, 1053,  202,  202,  202,
      202,  202, 1054,  202,  202,  202, 1088, 1086,  202,  202,
     1058,  202,  202,  202, 1056,  202, 1055, 1057, 1087,  202,
      202,  202,  202,  202, 1061,  202, 1059, 1062,  202,  202,
     1249,  202,  202,  202, 1088, 1060,  202,  202, 1058, 1249,
      202,  202,  202,  202,  202, 1065,  202,  202, 1089,  202,
      202, 1063, 1061, 1090, 1059, 1062,  202,  202, 1064, 1249,
      202,  202,  202, 1060, 1249,  202,  202,  202,  202, 1091,
      202, 1092,  202, 1065,  202,  202, 1089,  202, 1093, 1063,
     1066, 1090,  202, 1067,  202,  202, 1064,  202,  202,  202,

      202, 1069, 1068,  202,  202,  202,  202, 1091, 1074, 1092,
     1249,  202,  202, 1070,  202, 1249, 1093,  202, 1066,  202,
      202, 1067,  202,  202, 1071,  202,  202,  202,  202, 1069,
     1068,  202,  202,  202,  202,  202, 1074, 1072, 1075,  202,
      202, 1070,  202, 1076,  202,  202, 1249,  202,  202, 1077,
     1073, 1249, 1071,  202,  202,  202,  202, 1094,  202,  202,
      202,  202,  202,  202,  202, 1072, 1075, 1095,  202,  202,
     1079, 1076,  202,  202,  202, 1080,  202, 1077, 1073,  202,
     1096,  202,  202,  202, 1097, 1094,  202, 1078,  202, 1098,
      202, 1099,  202,  202,  202, 1095,  202,  202, 1079,  202,

     1100,  202,  202, 1080, 1101, 1102, 1103,  202, 1096, 1104,
      202, 1105, 1097, 1106, 1107, 1078,  202, 1098, 1108, 1099,
     1109,  202,  202, 1110, 1111, 1112, 1113,  202, 1100, 1114,
     1115, 1116, 1101, 1102, 1103, 1117, 1118, 1104, 1119, 1105,
     1120, 1106, 1107, 1249, 1249, 1121, 1108,  202, 1109, 1161,
     1123, 1110, 1111, 1112, 1113, 1249,  202, 1114, 1115, 1116,
      202,  202, 1249, 1117, 1118,  202, 1119,  202, 1120, 1122,
      202, 1124,  202, 1121, 1126,  202,  202, 1161, 1123, 1249,
      202,  202, 1249,  202,  202,  202, 1125,  202,  202,  202,
     1127, 1249,  202,  202, 1129,  202,  202, 1122,  202, 1124,

      202, 1128, 1126,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202, 1125,  202,  202, 1132, 1127,  202,
      202, 1130, 1129,  202,  202, 1249,  202, 1131,  202, 1128,
      202,  202,  202,  202,  202,  202, 1249, 1133,  202,  202,
      202, 1134,  202,  202,  202, 1132,  202,  202,  202, 1130,
     1249,  202, 1135,  202,  202, 1131,  202,  202,  202,  202,
      202, 1249,  202,  202,  202, 1133,  202,  202, 1136, 1134,
      202,  202,  202,  202,  202,  202,  202,  202, 1137,  202,
     1135,  202, 1162,  202,  202,  202, 1249,  202,  202,  202,
      202,  202,  202,  202,  202,  202, 1136,  202,  202,  202,

      202,  202, 1138,  202,  202,  202, 1137,  202, 1139,  202,
     1162,  202,  202,  202, 1141,  202,  202,  202,  202,  202,
      202,  202, 1249,  202,  202,  202,  202,  202, 1140,  202,
     1138,  202,  202, 1142,  202,  202, 1139,  202,  202, 1249,
      202,  202, 1141,  202,  202, 1143,  202,  202,  202,  202,
     1144,  202,  202, 1249,  202,  202, 1140,  202,  202,  202,
     1148, 1142,  202,  202,  202, 1145,  202,  202,  202,  202,
     1146, 1147,  202, 1143,  202,  202,  202,  202, 1144,  202,
      202,  202,  202,  202, 1249, 1150,  202,  202, 1148,  202,
     1163,  202,  202, 1145, 1164,  202, 1149,  202, 1146, 1147,

      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
     1151,  202,  202, 1150, 1152,  202,  202,  202, 1163,  202,
      202,  202, 1164, 1153, 1149,  202,  202,  202,  202,  202,
     1154, 1249,  202,  202,  202,  202,  202, 1165, 1151,  202,
      202,  202, 1152, 1155,  202,  202, 1156,  202,  202,  202,
      202, 1153, 1157,  202,  202,  202,  202,  202, 1154,  202,
      202,  202,  202,  202,  202, 1165, 1166,  202, 1249,  202,
      202, 1155, 1158,  202, 1156,  202,  202,  202,  202,  202,
     1157,  202,  202,  202,  202,  202,  202,  202, 1249,  202,
      202,  202, 1167, 1168, 1166,  202,  202, 1169,  202, 1159,

     1158, 1170, 1171, 1160,  202,  202,  202,  202, 1172,  202,
      202,  202, 1173, 1174,  202, 1175,  202, 1176, 1177, 1178,
     1167, 1168, 1179, 1249,  202, 1169, 1199, 1159,  202, 1170,
     1171, 1160,  202,  202,  202, 1180, 1172,  202, 1181,  202,
     1173, 1174, 1182, 1175,  202, 1176, 1177, 1178,  202,  202,
     1179,  202,  202,  202, 1199,  202,  202,  202,  202,  202,
      202,  202,  202, 1180, 1183,  202, 1181,  202,  202,  202,
     1182,  202, 1185,  202,  202,  202,  202,  202,  202,  202,
      202,  202, 1249,  202,  202,  202,  202,  202,  202, 1184,
      202,  202, 1183,  202,  202,  202,  202,  202,  202,  202,

     1185,  202,  202,  202,  202,  202,  202,  202,  202, 1186,
      202,  202,  202, 1249,  202, 1249,  202, 1184, 1187,  202,
      202,  202,  202,  202, 1188,  202,  202,  202,  202, 1191,
      202,  202,  202,  202,  202,  202,  202, 1186,  202,  202,
      202,  202,  202,  202, 1189,  202, 1187,  202,  202,  202,
     1190,  202, 1188,  202,  202,  202,  202, 1191,  202,  202,
      202,  202,  202,  202, 1192,  202,  202,  202,  202,  202,
      202,  202, 1189,  202,  202,  202, 1249,  202, 1190,  202,
      202, 1193,  202,  202,  202, 1194,  202, 1249,  202,  202,
      202,  202, 1192,  202,  202,  202, 1198, 1195,  202,  202,

      202,  202,  202,  202,  202, 1200,  202, 1197,  202, 1193,
     1201,  202,  202, 1194,  202, 1196,  202, 1202,  202,  202,
      202,  202, 1203, 1204, 1198, 1195,  202,  202,  202,  202,
     1205,  202,  202, 1200,  202, 1197, 1206, 1207, 1201, 1208,
     1209, 1210, 1211, 1196,  202, 1202,  202,  202,  202,  202,
     1203, 1204,  202,  202,  202, 1249,  202,  202, 1205, 1212,
     1225, 1213, 1249,  202, 1206, 1207,  202, 1208, 1209, 1210,
     1211, 1214,  202,  202,  202,  202,  202,  202, 1215, 1249,
      202,  202,  202,  202,  202,  202, 1249, 1212, 1225, 1213,
     1217,  202, 1216,  202,  202,  202,  202, 1249, 1249, 1214,

      202,  202,  202,  202,  202,  202, 1215,  202,  202, 1218,
      202,  202,  202,  202, 1219, 1226,  202, 1221, 1217,  202,
     1216,  202, 1249,  202,  202, 1220,  202,  202,  202,  202,
      202, 1223,  202, 1249, 1227,  202,  202, 1218,  202,  202,
      202,  202, 1219, 1226,  202, 1221,  202,  202, 1228, 1222,
      202,  202, 1229, 1220,  202,  202,  202,  202,  202, 1223,
      202, 1224, 1227, 1230, 1231,  202,  202,  202,  202, 1249,
      202, 1249, 1239, 1249,  202,  202, 1228, 1222,  202,  202,
     1229, 1233,  202, 1232,  202,  202,  202,  202,  202, 1224,
     1249, 1230, 1231,  202, 1249,  202,  202, 1234,  202,  202,

     1239,  202,  202,  202,  202, 1240, 1249, 1236,  202, 1233,
      202, 1232,  202,  202,  202,  202,  202,  202, 1235,  202,
     1238,  202, 1237,  202,  202, 1234, 1249,  202,  202,  202,
      202,  202,  202, 1240,  202, 1236,  202,  202,  202, 1243,
      202,  202,  202,  202,  202,  202, 1235,  202, 1238,  202,
     1237,  202,  202,  202,  202, 1242,  202, 1241,  202,  202,
      202, 1244,  202,  202,  202,  202,  202, 1243,  202,  202,
     1247,  202,  202,  202,  202,  202,  202,  202, 1249,  202,
      202,  202,  202, 1242,  202, 1241,  202,  202,  202, 1244,
     1245,  202,  202, 1249, 1249,  202, 1246, 1248, 1247, 1249,

      202,  202,  202,  202,  202,  202, 1249,  202,  202, 1249,
     1249, 1249,  202, 1249, 1249,  202, 1249, 1249, 1245, 1249,
     1249, 1249, 1249,  202, 1246, 1248, 1249, 1249,  202, 1249,
     1249, 1249, 1249, 1249, 1249,  202,   48,   48,   48,   48,
       48,   48,   92, 1249, 1249,   92,   92,   92,  186, 1249,
      186,  186,  186,  188,  188,  188, 1249,  188,  188,  190,
     1249,  190,  190,  190,  190,  193, 1249,  193,  193,  193,
      193,  202, 1249,  202,  202,  202,  202,  287, 1249,  287,
      287,  287,  287,    7, 1249, 1249, 1249, 1249, 1249, 1249,
     1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249,

     1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249,
     1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249,
     1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249,
     1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249,
     1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249,
     1249, 1249, 1249
    } ;

static const flex_int16_t yy_chk[5054] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    9,    9,
       10,   10,   15, 1252,   15,   17,   17,   18,   18,   22,
       23,   22,   25,  580,   24,   31,   25,   22,  413,   22,
       25,   24,   32,   22,   22,   38,   25,   28,   24,   25,
       23,   24,   24,   28,   26,  361,   26,   22,   23,   22,
       25,   26,   24,   31,   25,   22,   26,   22,   25,   24,
       32,   22,   22,   38,   25,   28,   24,   25,   23,   24,

       24,   28,   26,   29,   26,   45,   33,  290,   34,   26,
       33,   29,   34,  287,   26,   27,   33,   29,   34,   51,
       51,   52,   52,   27,   59,   59,   27,   35,   57,   27,
       57,   29,   27,   45,   33,   27,   34,  197,   33,   29,
       34,   35,  196,   27,   33,   29,   34,   35,   35,  193,
       37,   27,   39,  186,   27,   35,   39,   27,   43,  102,
       27,   37,   39,   27,   30,   30,   43,   37,   96,   35,
       30,   30,   30,   36,   95,   35,   35,   30,   37,   92,
       39,   36,   89,   36,   39,   36,   43,  102,   36,   37,
       39,   88,   30,   30,   43,   37,   44,   44,   30,   30,

       30,   36,   60,   60,   62,   30,   61,   70,   73,   36,
       42,   36,   42,   36,   70,   42,   36,   40,   73,   40,
       70,   74,   40,   58,   44,   44,  103,   70,   73,   40,
       40,   90,   90,   87,   40,   70,   73,  106,   42,   54,
       42,   74,   70,   42,  107,   40,   73,   40,   70,   74,
       40,   94,   94,   87,  103,   70,   73,   40,   40,   80,
      104,   87,   40,   41,   41,  106,  111,   41,  104,   74,
       41,   41,  107,  105,  114,   80,  105,   41,  118,   80,
       41,   87,   53,  110,  191,  191,   49,   80,  104,   47,
      110,   41,   41,   20,  111,   41,  104,   19,   41,   41,

       16,  105,  114,   80,  105,   41,  118,   80,   41,   63,
       63,  110,   63,   63,   63,   63,   63,   63,  110,   63,
       63,   63,   11,   71,   75,   76,   81,   71,   75,   76,
       81,   71,  113,  119,   75,   76,   81,   71,  112,  120,
      112,  122,  113,  124,   75,   76,   81,   71,  195,  195,
       63,   71,   75,   76,   81,   71,   75,   76,   81,   71,
      113,  119,   75,   76,   81,   71,  112,  120,  112,  122,
      113,  124,   75,   76,   81,   71,   79,   63,   64,   64,
       79,   64,   64,   64,   64,   64,   64,   79,   64,   64,
       64,    7,  108,   79,    4,   64,  115,   64,  117,  117,

       79,  115,   84,   64,   79,   64,  108,  126,   79,   64,
       64,   84,  127,   84,    3,   79,   84,  128,    0,   64,
      108,   79,   84,   64,  115,   64,  117,  117,   79,  115,
       84,   64,    0,   64,  108,  126,    0,   64,   64,   84,
      127,   84,  121,  121,   84,  128,   64,   65,   65,   65,
       84,  125,    0,    0,    0,   65,   85,   65,  125,  129,
       85,   65,   65,  130,   85,  131,    0,  134,   65,    0,
      121,  121,  136,    0,  137,   65,   65,   65,   86,  125,
       85,   86,   86,   65,   85,   65,  125,  129,   85,   65,
       65,  130,   85,  131,  116,  134,   65,   66,   86,  116,

      136,   66,  137,    0,   66,  116,   86,    0,   85,   86,
       86,   66,  116,  132,   66,   66,  132,  138,  123,  140,
      123,   66,  116,  141,  123,   66,   86,  116,  142,   66,
        0,  123,   66,  116,  143,  123,    0,    0,    0,   66,
      116,  132,   66,   66,  132,  138,  123,  140,  123,   66,
       67,  141,  123,  133,   67,  146,  142,  147,   67,  123,
      133,  148,  143,  123,   67,  133,  144,   67,  144,  144,
        0,    0,    0,  149,   67,    0,  150,  145,   67,  145,
        0,  133,   67,  146,    0,  147,   67,  151,  133,  148,
      145,  152,   67,  133,  144,   67,  144,  144,  139,  145,

      139,  149,   67,   68,  150,  145,  153,  145,  139,  155,
       68,  156,   68,  139,  139,  151,  157,   68,  145,  152,
      158,  159,   68,   68,    0,  160,  139,  145,  139,  160,
      161,   68,    0,    0,  153,    0,  139,  155,   68,  156,
       68,  139,  139,  163,  157,   68,  164,  165,  158,  159,
       68,   68,   69,  160,    0,  167,   69,  160,  161,  162,
       69,  162,    0,   69,  162,  168,   69,  169,  170,   69,
      171,  163,   69,  166,  164,  165,   69,    0,    0,    0,
       69,  172,  166,  167,   69,    0,    0,  162,   69,  162,
      166,   69,  162,  168,   69,  169,  170,   69,  171,  174,

       69,  166,  175,  176,   69,   72,   72,   72,  177,  172,
      166,  173,   72,   72,   72,  179,  173,  178,  166,   72,
      178,  180,  173,  181,  182,   72,    0,  174,  183,  181,
      175,  176,  184,   72,   72,   72,  177,  182,  185,  173,
       72,   72,   72,  179,  173,  178,    0,   72,  178,  180,
      173,  181,  182,   72,   77,    0,  183,  181,   77,    0,
      184,  202,  203,  203,  292,  182,  185,  210,   77,    0,
      294,  208,    0,  208,   77,   77,    0,    0,   77,    0,
        0,  202,   77,  203,    0,  204,   77,  210,    0,  202,
      203,  203,  292,  208,  295,  210,   77,  205,  294,  208,

      204,  208,   77,   77,  205,  204,   77,   78,   78,  202,
        0,  203,  205,  204,    0,  210,   78,  205,   78,    0,
       78,  208,  295,   78,    0,  205,    0,   78,  204,    0,
        0,  297,  205,  204,  207,   78,   78,  209,  209,  206,
      205,    0,  206,  206,   78,  205,   78,  207,   78,  299,
        0,   78,  209,    0,  207,   78,   82,  209,   82,  297,
        0,   82,  207,  206,    0,  209,  209,  206,   82,   82,
      206,  206,    0,   82,  211,  207,  300,  299,   82,    0,
      209,  211,  207,    0,   82,  209,   82,    0,  211,   82,
      214,  206,  236,    0,  211,  212,   82,   82,  301,  212,

      214,   82,  211,    0,  300,    0,   82,   83,   83,  211,
      214,   83,  236,  215,   83,   83,  211,    0,  214,  212,
      236,   83,  211,  212,   83,  213,  301,  212,  214,    0,
      215,   83,  213,  215,  213,   83,   83,  218,  214,   83,
      236,  215,   83,   83,  220,  213,  303,  212,  216,   83,
      218,  218,   83,  213,  220,  219,    0,  218,  215,   83,
      213,  215,  213,  216,  220,  218,    0,  304,  216,    0,
      221,  219,  220,  213,  303,  219,  216,    0,  218,  218,
        0,    0,  220,  219,  221,  218,    0,    0,  306,  307,
      221,  216,  220,    0,  235,  304,  216,  217,  221,  219,

      225,  217,  217,  219,  222,  222,  222,  225,  217,  223,
      235,  223,  221,    0,  235,  217,  306,  307,  221,    0,
      225,  217,  235,    0,  305,  217,  222,  311,  225,  217,
      217,  223,  222,  222,  222,  225,  217,  223,  235,  223,
      312,  305,  235,  217,  226,    0,  314,  227,  225,  217,
      228,  226,  305,    0,  222,  311,  302,  227,  302,  223,
      224,  229,  224,  228,  226,    0,  224,  227,  312,  305,
      228,  229,  226,  224,  314,  227,  230,  224,  228,  226,
      315,  229,  224,  230,  302,  227,  302,  231,  224,  229,
      224,  228,  226,  232,  224,  227,  230,  231,  228,  229,

      233,  224,    0,  232,  230,  224,    0,  231,  315,  229,
      224,  230,    0,  232,  233,  231,    0,  233,  237,  316,
      233,  232,    0,  239,  230,  231,    0,  237,  233,  238,
      234,  232,  234,  238,  239,  231,  242,    0,  237,  234,
      242,  232,  233,  239,  234,  233,  237,  316,  233,  238,
      234,  239,    0,    0,  241,  237,  242,  238,  234,    0,
      234,  238,  239,  241,  242,  243,  237,  234,  242,  317,
        0,  239,  234,    0,  241,    0,  318,  238,  234,  240,
      240,  240,  241,  255,  242,  243,  244,  244,    0,  240,
      245,  241,  247,  243,  240,  240,  245,  317,  245,  245,

      240,  265,  241,  255,  318,  247,  244,  240,  240,  240,
      245,  255,  247,  243,  244,  244,  248,  240,  245,  265,
      247,  265,  240,  240,  245,  248,  245,  245,  240,  265,
      250,  255,  319,  247,  244,    0,  248,  249,  245,  246,
      247,  246,    0,  246,  248,  250,  249,  265,  320,  265,
      250,    0,  246,  248,    0,  251,    0,  249,  250,  252,
      319,  246,  322,  246,  248,  249,  252,  246,  253,  246,
      251,  246,  253,  250,  249,  251,  320,    0,  250,  252,
      246,  254,  254,  251,  256,  249,    0,  252,  323,  246,
      322,  246,  253,  258,  252,    0,  253,  275,  251,  256,

      253,  254,  259,  251,  256,  257,  257,  252,  258,  254,
      254,    0,  256,  258,  260,  259,  323,  275,  260,  261,
      253,  258,  259,  261,  262,  275,  257,  256,  262,  254,
      259,    0,  256,  257,  257,  264,  258,  264,  260,  261,
        0,  258,  260,  259,  262,  275,  260,  261,  263,  309,
      259,  261,  262,  309,  257,  264,  262,  263,  266,  263,
        0,  266,  263,  264,  268,  264,  260,  261,  263,    0,
        0,  267,  262,  267,  268,    0,  263,  309,  266,    0,
      267,  309,    0,  264,  268,  263,  266,  263,  267,  266,
      263,  269,  268,  267,  270,  324,  263,  272,  270,  267,

      272,  267,  268,  271,  269,    0,  266,  271,  267,    0,
      273,  269,  268,  277,    0,    0,  267,  273,  270,  269,
      272,  267,  270,  324,  277,  272,  270,  271,  272,  276,
      273,  271,  269,  277,  274,  271,    0,  276,  273,  269,
      278,  277,  274,  280,  280,  273,  270,  274,  272,  276,
        0,    0,  277,  274,  274,  271,  278,  276,  273,  279,
      278,  277,  274,  279,  280,  276,  279,    0,  278,  281,
      274,  280,  280,  281,  325,  274,  326,  276,  284,  279,
      283,  274,  274,  282,  278,  327,  328,  279,  278,  281,
      282,  279,  280,  283,  279,  285,  282,  281,  284,  329,

      283,  281,  325,  282,  326,  286,  284,  279,  283,  286,
      285,  282,  330,  327,  328,  285,  313,  281,  282,  331,
      313,  283,  333,  285,  282,  334,  284,  329,  283,  286,
      335,  282,  336,  286,  337,  313,  338,  286,  285,  339,
      330,  340,  341,  285,  313,  342,  343,  331,  313,  344,
      333,  345,  346,  334,  347,  348,  349,  286,  335,  351,
      336,  350,  337,  313,  338,  352,  354,  339,  355,  340,
      341,  350,  356,  342,  343,  357,  358,  344,  359,  345,
      346,  360,  347,  348,  349,  362,  363,  351,  364,  350,
      365,  367,  368,  352,  354,  369,  355,  370,  371,  350,

      356,  372,  373,  357,  358,  374,  359,  375,  376,  360,
      377,  378,  379,  362,  363,  380,  364,  381,  365,  367,
      368,  373,  382,  369,  383,  370,  371,  384,  385,  372,
      373,  387,  388,  374,  389,  375,  376,  390,  377,  378,
      379,  391,  393,  380,  394,  381,  395,  396,  397,  373,
      382,  400,  383,  400,  399,  384,  385,  401,  402,  387,
      388,  403,  389,  399,  404,  390,  405,  406,  407,  391,
      393,  409,  394,  408,  395,  396,  397,  408,  410,  400,
      414,  400,  399,  415,  416,  401,  402,  417,    0,  403,
      418,  399,  404,  419,  405,  406,  407,  418,  420,  409,

      414,  408,  420,  415,  416,  408,  410,  417,  414,  421,
      418,  415,  416,  419,  422,  417,  424,    0,  418,    0,
        0,  419,  420,  424,  422,  418,  420,  423,  414,  421,
      420,  415,  416,  427,  422,  417,  424,  421,  418,    0,
        0,  419,  422,  426,  424,  423,  425,  423,  425,  427,
      420,  424,  422,  427,    0,  423,  426,  421,  430,    0,
      431,  427,  422,  426,  424,  428,  429,  428,  425,  433,
      429,  426,  430,  423,  425,  423,  425,  427,  430,  432,
      431,  427,  428,  432,  426,  434,  430,  428,  431,  433,
      429,  426,  434,  428,  429,  428,  425,  433,  429,  437,

      430,  437,  438,  432,  535,  434,  430,  432,  431,  536,
      428,  432,  435,  434,  442,  428,  435,  433,  429,  436,
      434,  437,  438,  436,    0,  440,  439,  437,  440,  437,
      438,  432,  535,  434,  442,    0,  435,  536,  436,  444,
      435,  439,  442,  436,  435,  537,  439,  436,  440,  437,
      438,  436,  441,  440,  439,  446,  440,  445,  443,  444,
        0,  445,  442,  441,  435,  443,  436,  444,  447,  439,
      447,  436,  441,  537,  439,  446,  440,  449,  443,  450,
      441,  445,  538,  446,  449,  445,  443,  444,  448,  445,
      447,  441,  450,  443,  453,  539,  447,  449,  447,  450,

      441,  451,  448,  446,  452,  449,  443,  450,  448,  445,
      538,  452,  449,  454,  453,  451,  448,  454,  447,    0,
      450,  451,  453,  539,  452,  449,  455,  450,  540,  451,
      448,  457,  452,    0,  542,  544,  448,  454,  457,  452,
      456,  454,  453,  451,  458,  454,  455,  458,  456,  451,
        0,  457,  452,  459,  455,    0,  540,    0,  460,  457,
      456,  460,  542,  544,  545,  454,  457,  458,  456,  459,
        0,  546,  458,  459,  455,  458,  456,    0,  460,  457,
      461,  459,  462,  463,  461,  462,  460,    0,  456,  460,
      547,    0,  545,    0,  464,  458,    0,  459,  463,  546,

      461,  459,  462,  463,  465,  466,  460,  548,  461,  464,
      462,  463,  461,  462,  464,  466,  469,  465,  547,  468,
      471,  467,  464,    0,  465,  466,  463,  467,  461,  468,
      462,  463,  465,  466,  470,  548,  469,  464,  470,  468,
      471,  467,  464,  466,  469,  465,    0,  468,  471,  467,
      472,  473,  465,  466,  470,  467,  474,  468,    0,  549,
      476,  473,  470,  478,  469,  475,  470,  468,  471,  467,
      472,  473,  474,  550,  475,  477,  474,  479,  472,  473,
      476,  479,  470,  478,  474,  475,  480,  549,  476,  473,
      477,  478,  483,  475,  483,  477,  552,  479,  472,  473,

      474,  550,  475,  477,  474,  479,  480,  484,  476,  479,
      553,  478,  483,  475,  480,  481,  481,  482,  477,    0,
      483,  482,  483,  477,  552,  479,  485,  484,  485,  484,
        0,  486,  489,  487,  480,  484,  481,    0,  553,  554,
      483,  482,  488,  481,  481,  482,  485,  486,  487,  482,
        0,  486,  489,  487,  485,  484,  485,    0,  488,  486,
      489,  487,  488,    0,  481,  490,  555,  554,  492,  482,
      488,  491,  490,  556,  485,  486,  487,  494,  495,  486,
      489,  487,  492,  493,  491,  490,  488,  493,  492,    0,
      488,  491,  558,  490,  555,    0,  492,  494,  495,  491,

      490,  556,  559,  493,  496,  494,  495,    0,  496,  497,
      492,  493,  491,  490,    0,  493,  492,  501,  497,  491,
      558,  501,  498,  496,    0,  494,  495,  499,  496,  497,
      559,  493,  496,  498,    0,  499,  496,  497,  500,  560,
      500,  501,  498,    0,    0,  501,  497,  499,  563,  501,
      498,  496,  502,  564,    0,  499,  496,  497,  503,  502,
      500,  498,  504,  499,  506,  504,  500,  560,  500,  501,
      498,  505,  502,  503,  565,  499,  563,  508,  503,    0,
      502,  564,  504,  509,  506,  505,  503,  502,  500,  510,
      504,  505,  506,  504,  507,    0,  515,  508,  566,  505,

      502,  503,  565,  509,  507,  508,  503,  510,  511,  510,
      504,  509,  506,  505,  507,    0,  515,  510,  512,  505,
      514,  513,  507,  511,  515,  508,  566,  514,  511,  567,
        0,  509,  507,  512,  513,  510,  511,  510,  512,  516,
      514,  513,  507,  518,  515,  517,  512,    0,  514,  513,
      516,  511,  520,  517,  521,  514,  511,  567,  518,  516,
      568,  512,  513,  518,    0,  517,  512,  516,  514,  513,
      519,  518,  520,  517,  521,  522,    0,    0,  516,  519,
      520,  517,  521,  569,  522,  570,  518,  516,  568,  523,
      519,  518,  525,  517,  524,  522,  525,    0,  519,  523,

      520,  523,  521,  522,  524,  527,  526,  519,  528,  523,
      528,  569,  522,  570,  524,  526,  525,  523,  519,  571,
      525,  527,  524,  522,  525,  527,  526,  523,  529,  523,
      528,    0,  524,  527,  526,  530,  528,  523,  528,  533,
      573,  576,  524,  526,  525,  577,  529,  571,  529,  527,
      530,  531,  533,  527,  526,  530,  529,  579,  528,  533,
      531,  582,  532,  530,  531,  532,  584,  533,  573,  576,
      585,  531,  586,  577,  529,  587,  529,  588,  530,  531,
      533,  589,  532,  530,  590,  579,  591,  533,  531,  582,
      532,  593,  531,  532,  584,  597,  598,  591,  585,  531,

      586,  600,  602,  587,  603,  588,  604,  604,  605,  589,
      532,  606,  590,  608,  591,  609,  610,  611,  612,  593,
      613,  614,  616,  597,  598,  591,  617,  618,  619,  600,
      602,  620,  603,  621,  604,  604,  605,  622,  624,  606,
      625,  608,  626,  609,  610,  611,  612,  628,  613,  614,
      616,  629,  630,  631,  617,  618,  619,  632,  633,  620,
      636,  621,  638,  639,  640,  622,  624,  641,  625,  642,
      626,  643,  644,  645,  647,  628,  649,    0,    0,  629,
      630,  631,    0,  652,  771,  632,  633,  654,  636,  655,
      638,  639,  640,  653,  657,  641,  652,  642,  773,  643,

      644,  645,  647,  652,  649,  656,  653,  654,  658,  655,
      660,  652,  771,  653,  657,  654,  659,  655,  656,  661,
      659,  653,  657,  661,  652,  656,  773,    0,  658,    0,
      660,  652,  664,  656,  653,  654,  658,  655,  660,  663,
      659,  653,  657,  661,  659,  664,  656,  661,  659,  662,
      665,  661,  664,  656,  668,  663,  658,  662,  660,  663,
      664,  666,    0,  667,    0,  665,  667,  663,  659,  662,
      665,  661,  669,  664,  668,  666,    0,  662,  665,  669,
      664,  666,  668,  663,  774,  662,  667,  663,  670,  666,
      671,  667,  669,  665,  667,  673,    0,  662,  665,  673,

      669,    0,  668,  666,  670,  674,  672,  669,  670,  666,
      671,  678,  774,  675,  667,  675,  670,  679,  671,  673,
      669,  672,  677,  673,  676,  674,  672,  673,  676,  677,
        0,  678,  670,  674,  672,  675,  670,  679,  671,  678,
        0,  675,  677,  675,  676,  679,  775,  673,  680,  672,
      677,  681,  676,  674,  672,  682,  676,  677,  680,  678,
      685,  683,  681,  675,  685,  679,  682,  684,  680,  686,
      677,  681,  676,  686,  775,  682,  680,  683,  687,  681,
        0,  683,  684,  682,  685,    0,  680,  684,  685,  683,
      681,  689,  685,  686,  682,  684,  680,  686,  687,  681,

        0,  686,  690,  682,  691,  683,  687,  688,  688,  683,
      684,  689,  685,  692,  693,  684,    0,  690,  693,  689,
      694,  686,  690,  695,  691,    0,  687,  697,  688,    0,
      690,  694,  691,  692,  698,  688,  688,  776,  693,  689,
      694,  692,  693,  695,  696,  690,  693,  697,  694,  697,
      690,  695,  691,  696,  698,  697,  688,  699,  700,  694,
      701,  692,  698,  702,  696,  776,  693,  699,  694,    0,
      704,  695,  696,  701,  703,  697,    0,  699,  700,  777,
      701,  696,  698,  702,  706,  699,  700,  703,  701,  704,
      704,  702,  696,  705,  703,  699,  707,  706,  704,    0,

      705,  701,  703,  709,  706,  699,  700,  777,  701,  707,
      711,  702,  706,  705,  712,  703,  707,  704,  704,    0,
      778,  705,  703,  709,  707,  706,  710,  708,  705,  708,
      711,  709,  706,  710,  712,    0,  713,  707,  711,  715,
      708,  705,  712,  716,  707,  714,  710,  708,  778,    0,
      718,  709,  720,  715,  710,  708,  713,  708,  711,  715,
      714,  710,  712,  716,  713,  714,  719,  715,  708,  717,
      718,  716,  720,  714,  710,  708,  717,  719,  718,    0,
      720,  715,  722,  723,  713,  722,  719,  715,  714,  717,
      779,  716,  721,  714,  719,  724,  723,  717,  718,  725,

      720,  725,  722,  723,  717,  719,  721,  721,  726,    0,
      722,  723,  721,  722,  719,  724,    0,  717,  779,    0,
      721,  725,  727,  724,  723,  728,  729,  725,  726,  725,
      722,  723,  727,  780,  721,  721,  726,  731,  728,  729,
      721,  731,  727,  724,  730,  728,  729,  733,  732,  725,
      727,  733,  730,  728,  729,    0,  726,  731,  734,    0,
      727,  780,  734,    0,  730,  731,  728,  729,  732,  731,
      727,  733,  730,  728,  729,  733,  732,  735,  738,  733,
      730,  736,  734,  735,  737,  731,  734,  739,  737,  736,
      734,  738,  730,  740,    0,  782,  732,  735,  738,  733,

      744,  736,  739,    0,  745,  735,  738,  739,  737,  736,
      734,  735,  737,  740,  741,  739,  737,  736,  742,  738,
      744,  740,  741,  782,  745,  735,  738,  742,  744,  736,
      739,  743,  745,  743,  741,  739,  737,  748,  742,    0,
      746,  740,  741,  747,  746,    0,  742,  750,  744,  751,
      741,  750,  745,  743,  749,  742,  752,  748,  747,  743,
      746,  743,  741,  747,  749,  748,  742,  750,  746,  751,
      754,  747,  746,  753,  749,  750,  752,  751,  755,  750,
      755,  743,  749,  783,  752,  748,  747,  753,  746,  757,
      754,  747,  749,  753,  756,  750,  784,  751,  754,    0,

      755,  753,  749,  756,  752,  757,  755,    0,  755,  757,
      759,  783,  758,  785,  756,  753,  758,  757,  754,    0,
        0,  753,  756,  761,  784,  759,  763,  760,  755,  760,
      759,  756,  762,  757,  786,  762,  758,  757,  759,  765,
      758,  785,  756,  761,  758,  764,  763,  760,  766,  767,
      768,  761,  762,  759,  763,  760,  788,  760,  759,  765,
      762,  764,  786,  762,  758,  764,  789,  765,  766,  767,
      768,  761,  790,  764,  763,  760,  766,  767,  768,  791,
      762,  792,  793,  794,  788,  795,  796,  765,  797,  764,
      799,  801,  803,  764,  789,  804,  766,  767,  768,  805,

      790,  806,  808,  810,  812,  813,  814,  791,  815,  792,
      793,  794,  819,  795,  796,  822,  797,  824,  799,  801,
      803,  825,  826,  804,  827,  830,  831,  805,  832,  806,
      808,  810,  812,  813,  814,  833,  815,  835,  836,  837,
      819,  839,  840,  822,  841,  824,  842,  843,  844,  825,
      826,  845,  827,  830,  831,  846,  832,  847,  848,  849,
      851,  852,  853,  833,  855,  835,  836,  837,  856,  839,
      840,  857,  841,  859,  842,  843,  844,  860,  862,  845,
      863,    0,  861,  846,  864,  847,  848,  849,  851,  852,
      853,  870,  855,  859,  865,  865,  856,  860,  862,  857,

      863,  859,  861,  861,  864,  860,  862,  866,  863,  866,
      861,  870,  864,    0,  869,  865,  871,    0,  867,  870,
      868,  859,  865,  865,  869,  860,  862,  867,  863,  866,
      861,  861,  864,  868,  869,  866,  871,  866,  867,  870,
      868,  872,  869,  865,  871,  872,  867,  874,  868,    0,
      873,  875,  869,  949,  874,  867,  876,  866,    0,    0,
      873,  868,  869,  877,  871,  872,  867,  874,  868,  872,
      873,  875,  878,  872,  880,  874,  876,  879,  873,  875,
        0,  949,  874,  877,  876,  951,  879,  878,  873,  881,
      882,  877,  878,  872,  880,  874,  952,  879,  873,  875,

      878,  883,  880,  881,  876,  879,    0,    0,  884,  881,
      882,  877,  885,  951,  879,  878,  883,  881,  882,  888,
      878,  883,  880,  884,  952,  879,  885,    0,  884,  883,
      886,  881,  885,  887,  886,  887,  884,  881,  882,  888,
      885,    0,    0,    0,  883,  889,  890,  888,  892,  883,
      886,  884,  896,    0,  885,  887,  884,  891,  886,  889,
      885,  887,  886,  887,  891,  889,  890,  888,  892,  893,
      894,  893,  896,  889,  890,  895,  892,  891,  886,    0,
      896,  894,  897,  887,  899,  891,  898,  889,  895,  893,
      894,  900,  891,  889,  890,  895,  892,  893,  894,  893,

      896,  898,  897,  895,  899,  891,  898,  901,    0,  894,
      897,  900,  899,  902,  898,    0,  895,  893,  894,  900,
      903,    0,  904,  895,  905,  906,  907,  901,  902,  898,
      897,  905,  899,  902,  898,  901,  904,  908,  909,  900,
      903,  902,  904,  910,  905,  906,  907,  911,  903,  912,
      904,  909,  905,  906,  907,  901,  902,  908,  909,  905,
      913,  902,  953,  910,  904,  908,  909,  911,  903,  912,
      904,  910,  905,  906,  907,  911,  954,  912,  914,  909,
      913,  915,  914,  916,  915,  908,  909,  917,  913,  955,
      953,  910,    0,  918,  919,  911,  917,  912,  916,  920,

      956,  915,  914,  916,  954,  921,  914,  917,  913,  915,
      914,  916,  915,  918,  919,  917,  958,  955,  924,  920,
      921,  918,  919,  922,  917,  921,  916,  920,  956,  915,
      914,  916,  923,  921,  925,  917,  922,  926,  924,  926,
        0,  918,  919,  922,  958,  923,  924,  920,  921,    0,
      928,  922,  923,  921,  925,  930,  930,  927,  959,  926,
      923,  927,  925,  960,  922,  926,  924,  926,  929,    0,
      928,  922,  929,  923,    0,  931,  930,  927,  928,  961,
      923,  964,  925,  930,  930,  927,  959,  926,  966,  927,
      931,  960,  929,  932,  932,  931,  929,  934,  928,  935,

      929,  934,  933,  931,  930,  927,  933,  961,  939,  964,
        0,  936,  939,  935,  932,    0,  966,  934,  931,  935,
      929,  932,  932,  931,  936,  934,  933,  935,  937,  934,
      933,  936,  939,  940,  933,  938,  939,  937,  941,  936,
      939,  935,  932,  942,  942,  934,    0,  935,  937,  943,
      938,    0,  936,  940,  933,  938,  937,  967,  941,  936,
      939,  940,  944,  938,  942,  937,  941,  969,  948,  943,
      946,  942,  942,  945,  946,  947,  937,  943,  938,  947,
      971,  940,  944,  938,  972,  967,  941,  945,  948,  976,
      944,  977,  942,  945,  946,  969,  948,  943,  946,  947,

      982,  945,  946,  947,  983,  985,  987,  947,  971,  988,
      944,  990,  972,  991,  992,  945,  948,  976,  993,  977,
      994,  945,  946,  996,  997,  998, 1002,  947,  982, 1003,
     1005, 1006,  983,  985,  987, 1007, 1008,  988, 1013,  990,
     1014,  991,  992,    0,    0, 1015,  993, 1016,  994, 1084,
     1018,  996,  997,  998, 1002,    0, 1019, 1003, 1005, 1006,
     1017, 1021,    0, 1007, 1008, 1015, 1013, 1016, 1014, 1017,
     1018, 1019, 1020, 1015, 1021, 1016, 1019, 1084, 1018,    0,
     1017, 1021,    0, 1022, 1019, 1023, 1020, 1024, 1017, 1021,
     1022,    0, 1020, 1015, 1025, 1016, 1025, 1017, 1018, 1019,

     1020, 1024, 1021, 1022, 1019, 1023, 1026, 1024, 1017, 1021,
     1028, 1022, 1029, 1023, 1020, 1024, 1025, 1030, 1022, 1030,
     1020, 1026, 1025, 1031, 1025,    0, 1026, 1027, 1027, 1024,
     1028, 1022, 1029, 1023, 1026, 1024,    0, 1032, 1028, 1030,
     1029, 1033, 1033, 1031, 1025, 1030, 1034, 1030, 1027, 1026,
        0, 1031, 1035, 1036, 1026, 1027, 1027, 1032, 1028, 1037,
     1029,    0, 1033, 1038, 1039, 1032, 1034, 1030, 1037, 1033,
     1033, 1031, 1035, 1036, 1034, 1040, 1027, 1041, 1038, 1037,
     1035, 1036, 1086, 1038, 1039, 1032,    0, 1037, 1043, 1042,
     1033, 1038, 1039, 1044, 1034, 1040, 1037, 1041, 1045, 1046,

     1035, 1036, 1042, 1040, 1047, 1041, 1038, 1037, 1043, 1042,
     1086, 1038, 1039, 1044, 1049, 1048, 1043, 1042, 1045, 1046,
     1050, 1044,    0, 1040, 1047, 1041, 1045, 1046, 1048, 1051,
     1042, 1052, 1047, 1051, 1049, 1048, 1043, 1042, 1053,    0,
     1050, 1044, 1049, 1048, 1055, 1053, 1045, 1046, 1050, 1051,
     1054, 1052, 1047,    0, 1054, 1057, 1048, 1051, 1053, 1052,
     1059, 1051, 1049, 1048, 1055, 1056, 1053, 1058, 1050, 1056,
     1057, 1058, 1055, 1053, 1054, 1057, 1060, 1051, 1054, 1052,
     1059, 1061, 1054, 1057,    0, 1062, 1053, 1058, 1059, 1056,
     1088, 1065, 1055, 1056, 1089, 1058, 1060, 1056, 1057, 1058,

     1064, 1061, 1054, 1057, 1060, 1062, 1066, 1067, 1059, 1061,
     1063, 1065, 1063, 1062, 1064, 1058, 1068, 1056, 1088, 1065,
     1064, 1069, 1089, 1068, 1060, 1070, 1066, 1067, 1064, 1061,
     1069,    0, 1063, 1062, 1066, 1067, 1068, 1092, 1063, 1065,
     1063, 1069, 1064, 1071, 1068, 1070, 1072, 1071, 1064, 1069,
     1072, 1068, 1073, 1070, 1066, 1067, 1073, 1074, 1069, 1075,
     1063, 1076, 1077, 1078, 1068, 1092, 1093, 1071,    0, 1069,
     1072, 1071, 1074, 1070, 1072, 1071, 1073, 1074, 1072, 1075,
     1073, 1076, 1077, 1078, 1073, 1074, 1079, 1075,    0, 1076,
     1077, 1078, 1098, 1101, 1093, 1071, 1080, 1102, 1072, 1079,

     1074, 1104, 1105, 1080, 1073, 1074, 1079, 1075, 1106, 1076,
     1077, 1078, 1107, 1111, 1079, 1114, 1080, 1115, 1116, 1117,
     1098, 1101, 1118,    0, 1080, 1102, 1161, 1079, 1121, 1104,
     1105, 1080, 1122, 1123, 1079, 1124, 1106, 1125, 1126, 1127,
     1107, 1111, 1128, 1114, 1080, 1115, 1116, 1117, 1121, 1130,
     1118, 1131, 1122, 1123, 1161, 1124, 1121, 1125, 1126, 1127,
     1122, 1123, 1128, 1124, 1129, 1125, 1126, 1127, 1129, 1130,
     1128, 1131, 1133, 1133, 1132, 1134, 1121, 1130, 1135, 1131,
     1122, 1123,    0, 1124, 1136, 1125, 1126, 1127, 1129, 1132,
     1128, 1137, 1129, 1133, 1132, 1134, 1129, 1130, 1135, 1131,

     1133, 1133, 1132, 1134, 1136, 1138, 1135, 1139, 1140, 1138,
     1143, 1137, 1136,    0, 1142,    0, 1129, 1132, 1141, 1137,
     1141, 1133, 1132, 1134, 1142, 1138, 1135, 1139, 1140, 1146,
     1143, 1144, 1136, 1138, 1142, 1139, 1140, 1138, 1143, 1137,
     1141, 1148, 1142, 1145, 1144, 1149, 1141, 1150, 1141, 1146,
     1145, 1144, 1142, 1138, 1147, 1139, 1140, 1146, 1143, 1144,
     1152, 1148, 1142, 1145, 1147, 1149, 1151, 1150, 1141, 1148,
     1153, 1145, 1144, 1149, 1147, 1150,    0, 1146, 1145, 1144,
     1152, 1151, 1147, 1154, 1155, 1154, 1151,    0, 1152, 1148,
     1153, 1145, 1147, 1149, 1151, 1150, 1158, 1155, 1153, 1157,

     1156, 1159, 1147, 1154, 1155, 1162, 1160, 1157, 1152, 1151,
     1163, 1154, 1155, 1154, 1151, 1156, 1158, 1164, 1153, 1157,
     1156, 1159, 1167, 1168, 1158, 1155, 1160, 1157, 1156, 1159,
     1169, 1154, 1155, 1162, 1160, 1157, 1171, 1172, 1163, 1173,
     1176, 1177, 1178, 1156, 1158, 1164, 1180, 1157, 1156, 1159,
     1167, 1168, 1181, 1184, 1160,    0, 1185, 1182, 1169, 1180,
     1200, 1181,    0, 1183, 1171, 1172, 1180, 1173, 1176, 1177,
     1178, 1182, 1181, 1184, 1180, 1187, 1185, 1182, 1183,    0,
     1181, 1184, 1186, 1183, 1185, 1182,    0, 1180, 1200, 1181,
     1187, 1183, 1186, 1189, 1180, 1187, 1188,    0,    0, 1182,

     1181, 1184, 1186, 1187, 1185, 1182, 1183, 1190, 1192, 1188,
     1186, 1183, 1191, 1189, 1190, 1202, 1188, 1192, 1187, 1193,
     1186, 1189,    0, 1187, 1188, 1191, 1194, 1190, 1192, 1195,
     1186, 1196, 1191,    0, 1203, 1190, 1192, 1188, 1198, 1193,
     1191, 1189, 1190, 1202, 1188, 1192, 1194, 1193, 1205, 1195,
     1197, 1196, 1206, 1191, 1194, 1190, 1192, 1195, 1198, 1196,
     1191, 1197, 1203, 1207, 1210, 1212, 1198, 1193, 1213,    0,
     1197,    0, 1227,    0, 1194, 1214, 1205, 1195, 1197, 1196,
     1206, 1215, 1217, 1213, 1216, 1212, 1198, 1219, 1213, 1197,
        0, 1207, 1210, 1212,    0, 1214, 1213, 1216, 1197, 1221,

     1227, 1215, 1217, 1214, 1216, 1228,    0, 1219, 1220, 1215,
     1217, 1213, 1216, 1212, 1218, 1219, 1213, 1222, 1218, 1221,
     1223, 1223, 1220, 1214, 1224, 1216,    0, 1221, 1220, 1215,
     1217, 1232, 1216, 1228, 1218, 1219, 1220, 1222, 1233, 1239,
     1235, 1223, 1218, 1236, 1224, 1222, 1218, 1221, 1223, 1223,
     1220, 1232, 1224, 1234, 1237, 1235, 1220, 1234, 1233, 1232,
     1235, 1240, 1218, 1236, 1238, 1222, 1233, 1239, 1235, 1223,
     1243, 1236, 1224, 1234, 1237, 1241, 1242, 1245,    0, 1232,
     1246, 1234, 1237, 1235, 1238, 1234, 1233, 1248, 1235, 1240,
     1241, 1236, 1238,    0,    0, 1241, 1242, 1245, 1243,    0,

     1246, 1234, 1237, 1241, 1242, 1245,    0, 1248, 1246,    0,
        0,    0, 1238,    0,    0, 1248,    0,    0, 1241,    0,
        0,    0,    0, 1241, 1242, 1245,    0,    0, 1246,    0,
        0,    0,    0,    0,    0, 1248, 1250, 1250, 1250, 1250,
     1250, 1250, 1251,    0,    0, 1251, 1251, 1251, 1253,    0,
     1253, 1253, 1253, 1254, 1254, 1254,    0, 1254, 1254, 1255,
        0, 1255, 1255, 1255, 1255, 1256,    0, 1256, 1256, 1256,
     1256, 1257,    0, 1257, 1257, 1257, 1257, 1258,    0, 1258,
     1258, 1258, 1258, 1249, 1249, 1249, 1249, 1249, 1249, 1249,
     1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249,

     1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249,
     1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249,
     1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249,
     1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249,
     1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249,
     1249, 1249, 1249
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "flex_lexer.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "flex_lexer.l"

#include "../../include/sqlparser/Expr.h"
#include "bison_parser.h"
#include <stdio.h>
#include <sstream>

#define TOKEN(name) { return SQL_##name; }

static std::stringstream strbuf;

#line 2200 "flex_lexer.cpp"

/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweaks */
/* other flags */
#define YY_NO_INPUT 1
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 2215 "flex_lexer.cpp"

#define INITIAL 0
#define singlequotedstring 1
#define COMMENT 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 57 "flex_lexer.l"


#line 2502 "flex_lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1250 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1249 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 59 "flex_lexer.l"
BEGIN(COMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 60 "flex_lexer.l"
/* skipping comment content until a end of line is read */;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 61 "flex_lexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 63 "flex_lexer.l"
/* skip whitespace */;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 65 "flex_lexer.l"
TOKEN(HIGH_PRIORITY)
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 66 "flex_lexer.l"
TOKEN(LOW_PRIORITY)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 67 "flex_lexer.l"
TOKEN(DEALLOCATE)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 68 "flex_lexer.l"
TOKEN(PARAMETERS)
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 69 "flex_lexer.l"
TOKEN(INTERSECT)
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 70 "flex_lexer.l"
TOKEN(TEMPORARY)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 71 "flex_lexer.l"
TOKEN(TIMESTAMP)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 72 "flex_lexer.l"
TOKEN(CHARACTER)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 73 "flex_lexer.l"
TOKEN(DATABASES)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 74 "flex_lexer.l"
TOKEN(DATABASE)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 75 "flex_lexer.l"
TOKEN(DISTINCT)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 76 "flex_lexer.l"
TOKEN(NVARCHAR)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 77 "flex_lexer.l"
TOKEN(RESTRICT)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 78 "flex_lexer.l"
TOKEN(TRUNCATE)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 79 "flex_lexer.l"
TOKEN(ANALYZE)
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 80 "flex_lexer.l"
TOKEN(BETWEEN)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 81 "flex_lexer.l"
TOKEN(CASCADE)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 82 "flex_lexer.l"
TOKEN(COLUMNS)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 83 "flex_lexer.l"
TOKEN(CONTROL)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 84 "flex_lexer.l"
TOKEN(DEFAULT)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 85 "flex_lexer.l"
TOKEN(DELAYED)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 86 "flex_lexer.l"
TOKEN(EXECUTE)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 87 "flex_lexer.l"
TOKEN(EXPLAIN)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 88 "flex_lexer.l"
TOKEN(HISTORY)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 89 "flex_lexer.l"
TOKEN(INTEGER)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 90 "flex_lexer.l"
TOKEN(NATURAL)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 91 "flex_lexer.l"
TOKEN(PREPARE)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 92 "flex_lexer.l"
TOKEN(PRIMARY)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 93 "flex_lexer.l"
TOKEN(SCHEMAS)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 94 "flex_lexer.l"
TOKEN(SPATIAL)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 95 "flex_lexer.l"
TOKEN(VARCHAR)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 96 "flex_lexer.l"
TOKEN(VIRTUAL)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 97 "flex_lexer.l"
TOKEN(BEFORE)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 98 "flex_lexer.l"
TOKEN(COLUMN)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 99 "flex_lexer.l"
TOKEN(CREATE)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 100 "flex_lexer.l"
TOKEN(DELETE)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 101 "flex_lexer.l"
TOKEN(DIRECT)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 102 "flex_lexer.l"
TOKEN(DOUBLE)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 103 "flex_lexer.l"
TOKEN(ESCAPE)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 104 "flex_lexer.l"
TOKEN(ESCAPED)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 105 "flex_lexer.l"
TOKEN(EXCEPT)
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 106 "flex_lexer.l"
TOKEN(EXISTS)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 107 "flex_lexer.l"
TOKEN(EXTRACT)
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 108 "flex_lexer.l"
TOKEN(GLOBAL)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 109 "flex_lexer.l"
TOKEN(HAVING)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 110 "flex_lexer.l"
TOKEN(IGNORE)
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 111 "flex_lexer.l"
TOKEN(IMPORT)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 112 "flex_lexer.l"
TOKEN(INSERT)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 113 "flex_lexer.l"
TOKEN(ISNULL)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 114 "flex_lexer.l"
TOKEN(OFFSET)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 115 "flex_lexer.l"
TOKEN(RENAME)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 116 "flex_lexer.l"
TOKEN(SCHEMA)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 117 "flex_lexer.l"
TOKEN(SELECT)
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 118 "flex_lexer.l"
TOKEN(SORTED)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 119 "flex_lexer.l"
TOKEN(TABLES)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 120 "flex_lexer.l"
TOKEN(UNIQUE)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 121 "flex_lexer.l"
TOKEN(UNLOAD)
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 122 "flex_lexer.l"
TOKEN(UPDATE)
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 123 "flex_lexer.l"
TOKEN(VALUES)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 124 "flex_lexer.l"
TOKEN(AFTER)
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 125 "flex_lexer.l"
TOKEN(ALTER)
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 126 "flex_lexer.l"
TOKEN(ARRAY)
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 127 "flex_lexer.l"
TOKEN(CROSS)
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 128 "flex_lexer.l"
TOKEN(DELTA)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 129 "flex_lexer.l"
TOKEN(FLOAT)
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 130 "flex_lexer.l"
TOKEN(GROUP)
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 131 "flex_lexer.l"
TOKEN(INDEX)
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 132 "flex_lexer.l"
TOKEN(INNER)
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 133 "flex_lexer.l"
TOKEN(LIMIT)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 134 "flex_lexer.l"
TOKEN(LOCAL)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 135 "flex_lexer.l"
TOKEN(MERGE)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 136 "flex_lexer.l"
TOKEN(MINUS)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 137 "flex_lexer.l"
TOKEN(ORDER)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 138 "flex_lexer.l"
TOKEN(OUTER)
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 139 "flex_lexer.l"
TOKEN(QUICK)
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 140 "flex_lexer.l"
TOKEN(RIGHT)
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 141 "flex_lexer.l"
TOKEN(TABLE)
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 142 "flex_lexer.l"
TOKEN(UNION)
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 143 "flex_lexer.l"
TOKEN(USING)
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 144 "flex_lexer.l"
TOKEN(WHERE)
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 145 "flex_lexer.l"
TOKEN(CALL)
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 146 "flex_lexer.l"
TOKEN(CASE)
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 147 "flex_lexer.l"
TOKEN(CHAR)
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 148 "flex_lexer.l"
TOKEN(DATA)
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 149 "flex_lexer.l"
TOKEN(DATE)
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 150 "flex_lexer.l"
TOKEN(DESC)
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 151 "flex_lexer.l"
TOKEN(DROP)
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 152 "flex_lexer.l"
TOKEN(ELSE)
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 153 "flex_lexer.l"
TOKEN(INFILE)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 154 "flex_lexer.l"
TOKEN(FILE)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 155 "flex_lexer.l"
TOKEN(FROM)
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 156 "flex_lexer.l"
TOKEN(FULL)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 157 "flex_lexer.l"
TOKEN(HASH)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 158 "flex_lexer.l"
TOKEN(HINT)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 159 "flex_lexer.l"
TOKEN(INTO)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 160 "flex_lexer.l"
TOKEN(JOIN)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 161 "flex_lexer.l"
TOKEN(LEFT)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 162 "flex_lexer.l"
TOKEN(LIKE)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 163 "flex_lexer.l"
TOKEN(ILIKE)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 164 "flex_lexer.l"
TOKEN(LOAD)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 165 "flex_lexer.l"
TOKEN(LONG)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 166 "flex_lexer.l"
TOKEN(NULL)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 167 "flex_lexer.l"
TOKEN(PLAN)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 168 "flex_lexer.l"
TOKEN(SHOW)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 169 "flex_lexer.l"
TOKEN(TEXT)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 170 "flex_lexer.l"
TOKEN(THEN)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 171 "flex_lexer.l"
TOKEN(TIME)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 172 "flex_lexer.l"
TOKEN(VIEW)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 173 "flex_lexer.l"
TOKEN(WHEN)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 174 "flex_lexer.l"
TOKEN(WITH)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 175 "flex_lexer.l"
TOKEN(ADD)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 176 "flex_lexer.l"
TOKEN(ALL)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 177 "flex_lexer.l"
TOKEN(AND)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 178 "flex_lexer.l"
TOKEN(ASC)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 179 "flex_lexer.l"
TOKEN(CSV)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 180 "flex_lexer.l"
TOKEN(END)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 181 "flex_lexer.l"
TOKEN(FOR)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 182 "flex_lexer.l"
TOKEN(INT)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 183 "flex_lexer.l"
TOKEN(KEY)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 184 "flex_lexer.l"
TOKEN(NOT)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 185 "flex_lexer.l"
TOKEN(OFF)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 186 "flex_lexer.l"
TOKEN(SET)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 187 "flex_lexer.l"
TOKEN(TBL)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 188 "flex_lexer.l"
TOKEN(TOP)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 189 "flex_lexer.l"
TOKEN(AS)
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 190 "flex_lexer.l"
TOKEN(BY)
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 191 "flex_lexer.l"
TOKEN(IF)
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 192 "flex_lexer.l"
TOKEN(IN)
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 193 "flex_lexer.l"
TOKEN(IS)
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 194 "flex_lexer.l"
TOKEN(OF)
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 195 "flex_lexer.l"
TOKEN(ON)
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 196 "flex_lexer.l"
TOKEN(OR)
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 197 "flex_lexer.l"
TOKEN(TO)
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 198 "flex_lexer.l"
TOKEN(SECOND)
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 199 "flex_lexer.l"
TOKEN(MINUTE)
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 200 "flex_lexer.l"
TOKEN(HOUR)
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 201 "flex_lexer.l"
TOKEN(DAY)
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 202 "flex_lexer.l"
TOKEN(MONTH)
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 203 "flex_lexer.l"
TOKEN(YEAR)
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 204 "flex_lexer.l"
TOKEN(TRUE)
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 205 "flex_lexer.l"
TOKEN(FALSE)
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 206 "flex_lexer.l"
TOKEN(CONCURRENT)
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 207 "flex_lexer.l"
TOKEN(REPLACE)
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 208 "flex_lexer.l"
TOKEN(PARTITION)
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 209 "flex_lexer.l"
TOKEN(FIELDS)
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 210 "flex_lexer.l"
TOKEN(TERMINATED)
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 211 "flex_lexer.l"
TOKEN(OPTIONALLY)
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 212 "flex_lexer.l"
TOKEN(ENCLOSED)
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 213 "flex_lexer.l"
TOKEN(LINES)
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 214 "flex_lexer.l"
TOKEN(ROWS)
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 215 "flex_lexer.l"
TOKEN(STARTING)
	YY_BREAK
/* Allow =/== see https://sqlite.org/lang_expr.html#collateop */
case 156:
YY_RULE_SETUP
#line 218 "flex_lexer.l"
TOKEN(EQUALS)             
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 219 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 220 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 221 "flex_lexer.l"
TOKEN(LESSEQ)
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 222 "flex_lexer.l"
TOKEN(GREATEREQ)
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 223 "flex_lexer.l"
TOKEN(CONCAT)
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 225 "flex_lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 163:
#line 228 "flex_lexer.l"
case 164:
YY_RULE_SETUP
#line 228 "flex_lexer.l"
{
	yylval->fval = atof(yytext);
	return SQL_FLOATVAL;
}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 233 "flex_lexer.l"
{
	yylval->ival = atol(yytext);
	return SQL_INTVAL;
}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 238 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 244 "flex_lexer.l"
{
        // Crop the leading and trailing backtick char
        yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
        return SQL_IDENTIFIER;
}
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 250 "flex_lexer.l"
{
	yylval->sval = strdup(yytext);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 255 "flex_lexer.l"
{ BEGIN singlequotedstring; strbuf = std::stringstream{}; }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 256 "flex_lexer.l"
{ strbuf << '\''; }
	YY_BREAK
case 171:
/* rule 171 can match eol */
YY_RULE_SETUP
#line 257 "flex_lexer.l"
{ strbuf << yytext; }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 258 "flex_lexer.l"
{ BEGIN 0; yylval->sval = strdup(strbuf.str().c_str()); return SQL_STRING; }
	YY_BREAK
case YY_STATE_EOF(singlequotedstring):
#line 259 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unterminated string\n"); return 0; }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 261 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]); return 0; }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 264 "flex_lexer.l"
ECHO;
	YY_BREAK
#line 3447 "flex_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1250 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1250 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1249);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 264 "flex_lexer.l"

/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
    fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return 0;
}

