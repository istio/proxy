.\" Copyright (C) 2022 Jens Axboe <axboe@kernel.dk>
.\"
.\" SPDX-License-Identifier: LGPL-2.0-or-later
.\"
.TH io_uring_prep_openat 3 "March 13, 2022" "liburing-2.2" "liburing Manual"
.SH NAME
io_uring_prep_openat \- prepare an openat request
.SH SYNOPSIS
.nf
.B #include <sys/types.h>
.B #include <sys/stat.h>
.B #include <fcntl.h>
.B #include <liburing.h>
.PP
.BI "void io_uring_prep_open(struct io_uring_sqe *" sqe ","
.BI "                          const char *" path ","
.BI "                          int " flags ","
.BI "                          mode_t " mode ");"
.PP
.BI "void io_uring_prep_open_direct(struct io_uring_sqe *" sqe ","
.BI "                                 const char *" path ","
.BI "                                 int " flags ","
.BI "                                 mode_t " mode ","
.BI "                                 unsigned " file_index ");"
.PP
.BI "void io_uring_prep_openat(struct io_uring_sqe *" sqe ","
.BI "                          int " dfd ","
.BI "                          const char *" path ","
.BI "                          int " flags ","
.BI "                          mode_t " mode ");"
.PP
.BI "void io_uring_prep_openat_direct(struct io_uring_sqe *" sqe ","
.BI "                                 int " dfd ","
.BI "                                 const char *" path ","
.BI "                                 int " flags ","
.BI "                                 mode_t " mode ","
.BI "                                 unsigned " file_index ");"
.fi
.SH DESCRIPTION
.PP
The
.BR io_uring_prep_openat (3)
function prepares an openat request. The submission queue entry
.I sqe
is setup to use the directory file descriptor
.I dfd
to start opening a file described by
.I path
and using the open flags in
.I flags
and using the file mode bits specified in
.IR mode .
Similarly
.BR io_uring_prep_open (3)
prepares an open request.

If the direct variant is used, the application must first have registered
a file table using
.BR io_uring_register_files (3)
of the appropriate size. Once registered, a direct accept request may use any
entry in that table and is specified in
.I file_index
, as long as it is within the size of the registered table.
If a specified entry already contains a file, the file will first be removed
from the table and closed. It's consistent with the behavior of updating an
existing file with
.BR io_uring_register_files_update (3).

If
.B IORING_FILE_INDEX_ALLOC
is used as the
.I file_index
for a direct open, then io_uring will allocate a free direct descriptor in
the existing table. The allocated descriptor is returned in the CQE
.I res
field just like it would be for a non-direct open request. If no more entries
are available in the direct descriptor table,
.B -ENFILE
is returned instead.

Direct descriptors are io_uring private file descriptors. They
avoid some of the overhead associated with thread shared file tables, and
can be used in any subsequent io_uring request that takes a file descriptor. To do so,
.B IOSQE_FIXED_FILE
must be set in the SQE
.I flags
member, and the SQE
.I fd
field should use the direct descriptor value rather than the regular file
descriptor. Direct descriptors are managed like registered files.

The directory file descriptor
.I dfd
is always a regular file descriptor.

Note that old kernels don't check the SQE
.I file_index
field, which is not a problem for liburing helpers, but users of the raw
io_uring interface need to zero SQEs to avoid unexpected behavior.

These functions prepare an async
.BR openat (2)
or
.BR open (2)
request. See that man page for details.

.SH RETURN VALUE
None
.SH ERRORS
The CQE
.I res
field will contain the result of the operation. See the related man page for
details on possible values. Note that where synchronous system calls will return
.B -1
on failure and set
.I errno
to the actual error value, io_uring never uses
.IR errno .
Instead it returns the negated
.I errno
directly in the CQE
.I res
field.
.SH NOTES
As with any request that passes in data in a struct, that data must remain
valid until the request has been successfully submitted. It need not remain
valid until completion. Once a request has been submitted, the in-kernel
state is stable. Very early kernels (5.4 and earlier) required state to be
stable until the completion occurred. Applications can test for this
behavior by inspecting the
.B IORING_FEAT_SUBMIT_STABLE
flag passed back from
.BR io_uring_queue_init_params (3).
.SH SEE ALSO
.BR io_uring_get_sqe (3),
.BR io_uring_submit (3),
.BR io_uring_register (2),
.BR openat (2)
