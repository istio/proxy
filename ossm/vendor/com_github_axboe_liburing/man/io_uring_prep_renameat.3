.\" Copyright (C) 2022 Jens Axboe <axboe@kernel.dk>
.\"
.\" SPDX-License-Identifier: LGPL-2.0-or-later
.\"
.TH io_uring_prep_renameat 3 "March 13, 2022" "liburing-2.2" "liburing Manual"
.SH NAME
io_uring_prep_renameat \- prepare a renameat request
.SH SYNOPSIS
.nf
.B #include <fcntl.h>
.B #include <stdio.h>
.B #include <liburing.h>
.PP
.BI "void io_uring_prep_renameat(struct io_uring_sqe *" sqe ","
.BI "                            int " olddirfd ","
.BI "                            const char *" oldpath ","
.BI "                            int " newdirfd ","
.BI "                            const char *" newpath ","
.BI "                            unsigned int " flags ");"
.PP
.BI "void io_uring_prep_rename(struct io_uring_sqe *" sqe ","
.BI "                          const char *" oldpath ","
.BI "                          const char *" newpath ");"
.fi
.SH DESCRIPTION
.PP
The
.BR io_uring_prep_renameat (3)
function prepares a renameat request. The submission queue entry
.I sqe
is setup to use the old directory file descriptor pointed to by
.I olddirfd
and old path pointed to by
.I oldpath
with the new directory file descriptor pointed to by
.I newdirfd
and the new path pointed to by
.I newpath
and using the specified flags in
.IR flags .

The
.BR io_uring_prep_rename (3)
function prepares a rename request. The submission queue entry
.I sqe
is setup to use the old path pointed to by
.I oldpath
with the new path pointed to by
.IR newpath ,
both relative to the current working directory and using the specified flags in
.IR flags .

These functions prepare an async
.BR renameat2 (2)
or
.BR rename (2)
request. If
.I flags
is zero, then this call is similar to the
.BR renameat (2)
system call. See those man pages for details.

.SH RETURN VALUE
None
.SH ERRORS
The CQE
.I res
field will contain the result of the operation. See the related man page for
details on possible values. Note that where synchronous system calls will return
.B -1
on failure and set
.I errno
to the actual error value, io_uring never uses
.IR errno .
Instead it returns the negated
.I errno
directly in the CQE
.I res
field.
.SH NOTES
As with any request that passes in data in a struct, that data must remain
valid until the request has been successfully submitted. It need not remain
valid until completion. Once a request has been submitted, the in-kernel
state is stable. Very early kernels (5.4 and earlier) required state to be
stable until the completion occurred. Applications can test for this
behavior by inspecting the
.B IORING_FEAT_SUBMIT_STABLE
flag passed back from
.BR io_uring_queue_init_params (3).
.SH SEE ALSO
.BR io_uring_get_sqe (3),
.BR io_uring_submit (3),
.BR renameat (2),
.BR renameat2 (2),
.BR rename (2)
