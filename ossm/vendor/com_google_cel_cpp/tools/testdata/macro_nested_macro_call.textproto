# proto-file: google3/google/api/expr/checked.proto
# proto-message: CheckedExpr
# math.least(has(msg.old_field) ? msg.old_field : 0, 1)
reference_map: {
  key: 4
  value: {
    name: "msg"
  }
}
reference_map: {
  key: 7
  value: {
    overload_id: "conditional"
  }
}
reference_map: {
  key: 8
  value: {
    name: "msg"
  }
}
reference_map: {
  key: 12
  value: {
    overload_id: "math_@min_int_int"
  }
}
type_map: {
  key: 4
  value: {
    map_type: {
      key_type: {
        primitive: STRING
      }
      value_type: {
        primitive: INT64
      }
    }
  }
}
type_map: {
  key: 6
  value: {
    primitive: BOOL
  }
}
type_map: {
  key: 7
  value: {
    primitive: INT64
  }
}
type_map: {
  key: 8
  value: {
    map_type: {
      key_type: {
        primitive: STRING
      }
      value_type: {
        primitive: INT64
      }
    }
  }
}
type_map: {
  key: 9
  value: {
    primitive: INT64
  }
}
type_map: {
  key: 10
  value: {
    primitive: INT64
  }
}
type_map: {
  key: 11
  value: {
    primitive: INT64
  }
}
type_map: {
  key: 12
  value: {
    primitive: INT64
  }
}
source_info: {
  location: "<input>"
  line_offsets: 54
  positions: {
    key: 1
    value: 0
  }
  positions: {
    key: 2
    value: 10
  }
  positions: {
    key: 3
    value: 14
  }
  positions: {
    key: 4
    value: 15
  }
  positions: {
    key: 5
    value: 18
  }
  positions: {
    key: 6
    value: 14
  }
  positions: {
    key: 7
    value: 30
  }
  positions: {
    key: 8
    value: 32
  }
  positions: {
    key: 9
    value: 35
  }
  positions: {
    key: 10
    value: 48
  }
  positions: {
    key: 11
    value: 51
  }
  positions: {
    key: 12
    value: 10
  }
  macro_calls: {
    key: 6
    value: {
      call_expr: {
        function: "has"
        args: {
          id: 5
          select_expr: {
            operand: {
              id: 4
              ident_expr: {
                name: "msg"
              }
            }
            field: "old_field"
          }
        }
      }
    }
  }
  macro_calls: {
    key: 12
    value: {
      call_expr: {
        target: {
          id: 1
          ident_expr: {
            name: "math"
          }
        }
        function: "least"
        args: {
          id: 7
          call_expr: {
            function: "_?_:_"
            args: {
              id: 6
            }
            args: {
              id: 9
              select_expr: {
                operand: {
                  id: 8
                  ident_expr: {
                    name: "msg"
                  }
                }
                field: "old_field"
              }
            }
            args: {
              id: 10
              const_expr: {
                int64_value: 0
              }
            }
          }
        }
        args: {
          id: 11
          const_expr: {
            int64_value: 1
          }
        }
      }
    }
  }
}
expr: {
  id: 12
  call_expr: {
    function: "math.@min"
    args: {
      id: 7
      call_expr: {
        function: "_?_:_"
        args: {
          id: 6
          select_expr: {
            operand: {
              id: 4
              ident_expr: {
                name: "msg"
              }
            }
            field: "old_field"
            test_only: true
          }
        }
        args: {
          id: 9
          select_expr: {
            operand: {
              id: 8
              ident_expr: {
                name: "msg"
              }
            }
            field: "old_field"
          }
        }
        args: {
          id: 10
          const_expr: {
            int64_value: 0
          }
        }
      }
    }
    args: {
      id: 11
      const_expr: {
        int64_value: 1
      }
    }
  }
}
