#!/bin/bash

# Copyright 2017 The Bazel Authors. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# --- begin runfiles.bash initialization v3 ---
# Copy-pasted from the Bazel Bash runfiles library v3.
set -uo pipefail; f=bazel_tools/tools/bash/runfiles/runfiles.bash
source "${RUNFILES_DIR:-/dev/null}/$f" 2>/dev/null || \
  source "$(grep -sm1 "^$f " "${RUNFILES_MANIFEST_FILE:-/dev/null}" | cut -f2- -d' ')" 2>/dev/null || \
  source "$0.runfiles/$f" 2>/dev/null || \
  source "$(grep -sm1 "^$f " "$0.runfiles_manifest" | cut -f2- -d' ')" 2>/dev/null || \
  source "$(grep -sm1 "^$f " "$0.exe.runfiles_manifest" | cut -f2- -d' ')" 2>/dev/null || \
  { echo>&2 "ERROR: cannot find $f"; exit 1; }; f=;
# --- end runfiles.bash initialization v3 ---

set -euxo pipefail

# inputs
executable="%executable%"
expected_return_code="%expected_return_code%"
expected_logs=%expected_logs%
not_expected_logs=%expected_logs%

# execute the target under test while recording its outputs and return code
tmp_dir=$(mktemp -d)
trap 'rm -rf "$tmp_dir"' EXIT
readonly testlog="$tmp_dir/test.log"

return_code=0
$(rlocation "$executable") 2>&1 | tee -i "$testlog" || return_code=$?

# verify expected return code
if [[ "$return_code" -ne $expected_return_code ]]; then
  echo "Fail: return code was $return_code but expected $expected_return_code"
  exit 1
fi

# verify the presence of expected logs
for expected in "${expected_logs[@]}"
do
  if ! grep --quiet --regexp "$expected" "$testlog"; then
    echo "Fail: didn't find expected log: $expected"
    exit 1
  fi
done

# verify the absence of unexpected logs
for unexpected in "${not_expected_logs[@]}"
do
  if ! grep --quiet --invert-match --regexp "$unexpected" "$testlog"; then
    echo "Fail: found unexpected log: $unexpected"
    exit 1
  fi
done
