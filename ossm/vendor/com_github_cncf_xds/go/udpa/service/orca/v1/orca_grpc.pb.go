// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.0--rc2
// source: udpa/service/orca/v1/orca.proto

package v1

import (
	context "context"
	v1 "github.com/cncf/xds/go/udpa/data/orca/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OpenRcaService_StreamCoreMetrics_FullMethodName = "/udpa.service.orca.v1.OpenRcaService/StreamCoreMetrics"
)

// OpenRcaServiceClient is the client API for OpenRcaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OpenRcaServiceClient interface {
	StreamCoreMetrics(ctx context.Context, in *OrcaLoadReportRequest, opts ...grpc.CallOption) (OpenRcaService_StreamCoreMetricsClient, error)
}

type openRcaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOpenRcaServiceClient(cc grpc.ClientConnInterface) OpenRcaServiceClient {
	return &openRcaServiceClient{cc}
}

func (c *openRcaServiceClient) StreamCoreMetrics(ctx context.Context, in *OrcaLoadReportRequest, opts ...grpc.CallOption) (OpenRcaService_StreamCoreMetricsClient, error) {
	stream, err := c.cc.NewStream(ctx, &OpenRcaService_ServiceDesc.Streams[0], OpenRcaService_StreamCoreMetrics_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &openRcaServiceStreamCoreMetricsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OpenRcaService_StreamCoreMetricsClient interface {
	Recv() (*v1.OrcaLoadReport, error)
	grpc.ClientStream
}

type openRcaServiceStreamCoreMetricsClient struct {
	grpc.ClientStream
}

func (x *openRcaServiceStreamCoreMetricsClient) Recv() (*v1.OrcaLoadReport, error) {
	m := new(v1.OrcaLoadReport)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OpenRcaServiceServer is the server API for OpenRcaService service.
// All implementations should embed UnimplementedOpenRcaServiceServer
// for forward compatibility
type OpenRcaServiceServer interface {
	StreamCoreMetrics(*OrcaLoadReportRequest, OpenRcaService_StreamCoreMetricsServer) error
}

// UnimplementedOpenRcaServiceServer should be embedded to have forward compatible implementations.
type UnimplementedOpenRcaServiceServer struct {
}

func (UnimplementedOpenRcaServiceServer) StreamCoreMetrics(*OrcaLoadReportRequest, OpenRcaService_StreamCoreMetricsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamCoreMetrics not implemented")
}

// UnsafeOpenRcaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OpenRcaServiceServer will
// result in compilation errors.
type UnsafeOpenRcaServiceServer interface {
	mustEmbedUnimplementedOpenRcaServiceServer()
}

func RegisterOpenRcaServiceServer(s grpc.ServiceRegistrar, srv OpenRcaServiceServer) {
	s.RegisterService(&OpenRcaService_ServiceDesc, srv)
}

func _OpenRcaService_StreamCoreMetrics_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(OrcaLoadReportRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OpenRcaServiceServer).StreamCoreMetrics(m, &openRcaServiceStreamCoreMetricsServer{stream})
}

type OpenRcaService_StreamCoreMetricsServer interface {
	Send(*v1.OrcaLoadReport) error
	grpc.ServerStream
}

type openRcaServiceStreamCoreMetricsServer struct {
	grpc.ServerStream
}

func (x *openRcaServiceStreamCoreMetricsServer) Send(m *v1.OrcaLoadReport) error {
	return x.ServerStream.SendMsg(m)
}

// OpenRcaService_ServiceDesc is the grpc.ServiceDesc for OpenRcaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OpenRcaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "udpa.service.orca.v1.OpenRcaService",
	HandlerType: (*OpenRcaServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamCoreMetrics",
			Handler:       _OpenRcaService_StreamCoreMetrics_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "udpa/service/orca/v1/orca.proto",
}
